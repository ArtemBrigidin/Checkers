{"ast":null,"code":"function closestPolyfill(el, selector) {\n  while (el) {\n    if (el.matches(selector)) return el;\n    el = el.parentElement;\n  }\n  return null;\n}\nif (!Element.prototype.closest) {\n  Element.prototype.closest = function (selector) {\n    let el = this;\n    while (el) {\n      if (el.matches(selector)) return el;\n      el = el.parentElement;\n    }\n    return null;\n  };\n}\ndocument.addEventListener('click', event => {\n  const board = event.target.closest('.Board');\n  if (board) {\n    const element = closestPolyfill(event.target, 'div');\n    if (element) {\n      const computedStyle = window.getComputedStyle(element);\n      const gridArea = computedStyle.gridArea;\n      const rowStart = computedStyle.gridRowStart;\n      const columnStart = computedStyle.gridColumnStart;\n      if (gridArea !== 'none') {\n        console.log(`Grid Area: ${gridArea}`);\n      }\n      if (rowStart !== 'auto' && columnStart !== 'auto') {\n        console.log(`Row: ${rowStart}, Column: ${columnStart}`);\n      }\n    }\n  }\n});\nlet selectedChecker = null; // Выбранная шашка\n\ndocument.addEventListener(\"click\", event => {\n  const cell = event.target.closest(\".Board\");\n  const checker = event.target.closest(\".checker\");\n  if (checker) {\n    // Выделяем шашку\n    if (selectedChecker) selectedChecker.classList.remove(\"selected\");\n    selectedChecker = checker;\n    selectedChecker.classList.add(\"selected\");\n  } else if (cell && selectedChecker) {\n    const currentCell = selectedChecker.closest(\".Board\");\n    const targetCell = cell;\n\n    // Проверяем, можно ли переместить шашку\n    if (isMoveValid(currentCell, targetCell, selectedChecker)) {\n      // Если прыжок через шашку — удаляем её\n      const jumpedCell = getJumpedCell(currentCell, targetCell);\n      if (jumpedCell) {\n        const jumpedChecker = jumpedCell.querySelector(\".checker\");\n        if (jumpedChecker) jumpedChecker.remove();\n      }\n\n      // Перемещаем шашку\n      targetCell.appendChild(selectedChecker);\n      selectedChecker.classList.remove(\"selected\");\n      selectedChecker = null;\n    }\n  }\n});\nfunction isMoveValid(currentCell, targetCell, checker) {\n  console.log(\"Validating move...\");\n  console.log(\"Current Cell:\", currentCell);\n  console.log(\"Target Cell:\", targetCell);\n  const currentGridArea = window.getComputedStyle(currentCell).gridArea;\n  const targetGridArea = window.getComputedStyle(targetCell).gridArea;\n  console.log(\"Current Grid Area:\", currentGridArea);\n  console.log(\"Target Grid Area:\", targetGridArea);\n  if (!currentGridArea || !targetGridArea) {\n    console.log(\"Grid areas are not defined.\");\n    return false;\n  }\n  const [currentRow, currentCol] = parseGridArea(currentGridArea);\n  const [targetRow, targetCol] = parseGridArea(targetGridArea);\n  const rowDiff = Math.abs(targetRow - currentRow);\n  const colDiff = Math.abs(targetCol - currentCol);\n  console.log(`Row Difference: ${rowDiff}, Column Difference: ${colDiff}`);\n\n  // Проверяем обычный ход\n  if (rowDiff === 1 && colDiff === 1) return true;\n\n  // Проверяем прыжок через шашку\n  if (rowDiff === 2 && colDiff === 2) {\n    console.log(\"Valid jump detected.\");\n    return true;\n  }\n  return false;\n}\nfunction getJumpedCell(currentCell, targetCell) {\n  console.log(\"jump\");\n\n  // Получаем `grid-area` для текущей и целевой ячейки\n  const currentGridArea = window.getComputedStyle(currentCell).gridArea;\n  const targetGridArea = window.getComputedStyle(targetCell).gridArea;\n\n  // Парсим `grid-area` строки\n  const [currentRow, currentCol] = parseGridArea(currentGridArea);\n  const [targetRow, targetCol] = parseGridArea(targetGridArea);\n\n  // Вычисляем координаты промежуточной ячейки\n  const jumpedRow = (currentRow + targetRow) / 2;\n  const jumpedCol = (currentCol + targetCol) / 2;\n\n  // Находим промежуточную ячейку по этим координатам\n  return findCellByGridArea(jumpedRow, jumpedCol);\n}\n\n// Вспомогательная функция для парсинга `grid-area`\nfunction parseGridArea(gridArea) {\n  // Формат `grid-area` — \"row-start / col-start / row-end / col-end\"\n  const [rowStart, colStart] = gridArea.split(\" / \").map(Number);\n  return [rowStart, colStart];\n}\n\n// Вспомогательная функция для поиска ячейки по координатам\nfunction findCellByGridArea(row, col) {\n  // Находим ячейку, соответствующую grid-area\n  return Array.from(document.querySelectorAll('.Cell')).find(cell => {\n    const gridArea = window.getComputedStyle(cell).gridArea;\n    const [cellRow, cellCol] = parseGridArea(gridArea);\n    return cellRow === row && cellCol === col;\n  });\n}","map":{"version":3,"names":["closestPolyfill","el","selector","matches","parentElement","Element","prototype","closest","document","addEventListener","event","board","target","element","computedStyle","window","getComputedStyle","gridArea","rowStart","gridRowStart","columnStart","gridColumnStart","console","log","selectedChecker","cell","checker","classList","remove","add","currentCell","targetCell","isMoveValid","jumpedCell","getJumpedCell","jumpedChecker","querySelector","appendChild","currentGridArea","targetGridArea","currentRow","currentCol","parseGridArea","targetRow","targetCol","rowDiff","Math","abs","colDiff","jumpedRow","jumpedCol","findCellByGridArea","colStart","split","map","Number","row","col","Array","from","querySelectorAll","find","cellRow","cellCol"],"sources":["C:/Users/79650/Desktop/lolkekshahmati/src/DOM/Checkers/Game/Board/CheckerMove.js"],"sourcesContent":["function closestPolyfill(el, selector) {\r\n    while (el) {\r\n        if (el.matches(selector)) return el;\r\n        el = el.parentElement;\r\n    }\r\n    return null;\r\n}\r\n\r\nif (!Element.prototype.closest) {\r\n    Element.prototype.closest = function(selector) {\r\n        let el = this;\r\n        while (el) {\r\n            if (el.matches(selector)) return el;\r\n            el = el.parentElement;\r\n        }\r\n        return null;\r\n    };\r\n}\r\n\r\ndocument.addEventListener('click', (event) => {\r\n    const board = event.target.closest('.Board');\r\n    if (board) {\r\n        const element = closestPolyfill(event.target, 'div');\r\n        if (element) {\r\n            const computedStyle = window.getComputedStyle(element);\r\n            const gridArea = computedStyle.gridArea;\r\n            const rowStart = computedStyle.gridRowStart;\r\n            const columnStart = computedStyle.gridColumnStart;\r\n\r\n            if (gridArea !== 'none') {\r\n                console.log(`Grid Area: ${gridArea}`);\r\n            }\r\n            if (rowStart !== 'auto' && columnStart !== 'auto') {\r\n                console.log(`Row: ${rowStart}, Column: ${columnStart}`);\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nlet selectedChecker = null; // Выбранная шашка\r\n\r\ndocument.addEventListener(\"click\", (event) => {\r\n    const cell = event.target.closest(\".Board\");\r\n    const checker = event.target.closest(\".checker\");\r\n\r\n    if (checker) {\r\n        // Выделяем шашку\r\n        if (selectedChecker) selectedChecker.classList.remove(\"selected\");\r\n        selectedChecker = checker;\r\n        selectedChecker.classList.add(\"selected\");\r\n    } else if (cell && selectedChecker) {\r\n        const currentCell = selectedChecker.closest(\".Board\");\r\n        const targetCell = cell;\r\n\r\n        // Проверяем, можно ли переместить шашку\r\n        if (isMoveValid(currentCell, targetCell, selectedChecker)) {\r\n            // Если прыжок через шашку — удаляем её\r\n            const jumpedCell = getJumpedCell(currentCell, targetCell);\r\n            if (jumpedCell) {\r\n                const jumpedChecker = jumpedCell.querySelector(\".checker\");\r\n                if (jumpedChecker) jumpedChecker.remove();\r\n            }\r\n\r\n            // Перемещаем шашку\r\n            targetCell.appendChild(selectedChecker);\r\n            selectedChecker.classList.remove(\"selected\");\r\n            selectedChecker = null;\r\n        }\r\n    }\r\n});\r\n\r\nfunction isMoveValid(currentCell, targetCell, checker) {\r\n    console.log(\"Validating move...\");\r\n    console.log(\"Current Cell:\", currentCell);\r\n    console.log(\"Target Cell:\", targetCell);\r\n\r\n    const currentGridArea = window.getComputedStyle(currentCell).gridArea;\r\n    const targetGridArea = window.getComputedStyle(targetCell).gridArea;\r\n\r\n    console.log(\"Current Grid Area:\", currentGridArea);\r\n    console.log(\"Target Grid Area:\", targetGridArea);\r\n\r\n\r\n    if (!currentGridArea || !targetGridArea) {\r\n        console.log(\"Grid areas are not defined.\");\r\n        return false;\r\n    }\r\n\r\n    const [currentRow, currentCol] = parseGridArea(currentGridArea);\r\n    const [targetRow, targetCol] = parseGridArea(targetGridArea);\r\n\r\n    const rowDiff = Math.abs(targetRow - currentRow);\r\n    const colDiff = Math.abs(targetCol - currentCol);\r\n\r\n    console.log(`Row Difference: ${rowDiff}, Column Difference: ${colDiff}`);\r\n\r\n    // Проверяем обычный ход\r\n    if (rowDiff === 1 && colDiff === 1) return true;\r\n\r\n    // Проверяем прыжок через шашку\r\n    if (rowDiff === 2 && colDiff === 2) {\r\n        console.log(\"Valid jump detected.\");\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n\r\nfunction getJumpedCell(currentCell, targetCell) {\r\n    console.log(\"jump\");\r\n\r\n    // Получаем `grid-area` для текущей и целевой ячейки\r\n    const currentGridArea = window.getComputedStyle(currentCell).gridArea;\r\n    const targetGridArea = window.getComputedStyle(targetCell).gridArea;\r\n\r\n    // Парсим `grid-area` строки\r\n    const [currentRow, currentCol] = parseGridArea(currentGridArea);\r\n    const [targetRow, targetCol] = parseGridArea(targetGridArea);\r\n\r\n    // Вычисляем координаты промежуточной ячейки\r\n    const jumpedRow = (currentRow + targetRow) / 2;\r\n    const jumpedCol = (currentCol + targetCol) / 2;\r\n\r\n    // Находим промежуточную ячейку по этим координатам\r\n    return findCellByGridArea(jumpedRow, jumpedCol);\r\n}\r\n\r\n// Вспомогательная функция для парсинга `grid-area`\r\nfunction parseGridArea(gridArea) {\r\n    // Формат `grid-area` — \"row-start / col-start / row-end / col-end\"\r\n    const [rowStart, colStart] = gridArea.split(\" / \").map(Number);\r\n    return [rowStart, colStart];\r\n}\r\n\r\n// Вспомогательная функция для поиска ячейки по координатам\r\nfunction findCellByGridArea(row, col) {\r\n    // Находим ячейку, соответствующую grid-area\r\n    return Array.from(document.querySelectorAll('.Cell')).find(cell => {\r\n        const gridArea = window.getComputedStyle(cell).gridArea;\r\n        const [cellRow, cellCol] = parseGridArea(gridArea);\r\n        return cellRow === row && cellCol === col;\r\n    });\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}