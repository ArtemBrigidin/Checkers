{"ast":null,"code":"const board = document.querySelector('.Board');\nconst playerCemetery = document.getElementById('PlayerCemetry');\nconst enemyCemetery = document.getElementById('EnemyCemetry');\nlet selectedChecker = null;\n\n// Helper to parse grid-area style (returns {row, col})\nfunction parseGridArea(element) {\n  const [row, col] = element.style.gridArea.split(' / ').map(Number);\n  return {\n    row,\n    col\n  };\n}\n\n// Select a checker\nboard.addEventListener('click', event => {\n  const target = event.target.closest('.checker');\n  if (target && selectedChecker !== target) {\n    if (selectedChecker) selectedChecker.classList.remove('selected');\n    selectedChecker = target;\n    selectedChecker.classList.add('selected');\n  } else if (selectedChecker) {\n    moveChecker(event);\n  }\n});\n\n// Move or jump logic\nfunction moveChecker(event) {\n  const cell = event.target.closest('.Cell');\n  if (!cell || !selectedChecker) return;\n  const {\n    row: startRow,\n    col: startCol\n  } = parseGridArea(selectedChecker);\n  const {\n    row: endRow,\n    col: endCol\n  } = parseGridArea(cell);\n  const rowDiff = Math.abs(endRow - startRow);\n  const colDiff = Math.abs(endCol - startCol);\n  if (rowDiff === 1 && colDiff === 1) {\n    // Simple move\n    selectedChecker.style.gridArea = `${endRow} / ${endCol}`;\n  } else if (rowDiff === 2 && colDiff === 2) {\n    // Jump logic\n    const middleRow = (startRow + endRow) / 2;\n    const middleCol = (startCol + endCol) / 2;\n    const middleCell = [...document.querySelectorAll('.checker')].find(checker => {\n      const {\n        row,\n        col\n      } = parseGridArea(checker);\n      return row === middleRow && col === middleCol && checker !== selectedChecker;\n    });\n    if (middleCell && !isSameColor(selectedChecker, middleCell)) {\n      // Capture the opponent's checker\n      captureChecker(middleCell);\n      selectedChecker.style.gridArea = `${endRow} / ${endCol}`;\n    }\n  }\n  selectedChecker.classList.remove('selected');\n  selectedChecker = null;\n}\n\n// Check if two checkers are the same color\nfunction isSameColor(checker1, checker2) {\n  return checker1.classList.contains('black') === checker2.classList.contains('black');\n}\n\n// Capture a checker and move to the cemetery\nfunction captureChecker(checker) {\n  if (checker.classList.contains('black')) {\n    playerCemetery.appendChild(checker);\n  } else {\n    enemyCemetery.appendChild(checker);\n  }\n  checker.style.gridArea = ''; // Reset grid-area when moving to cemetery\n}","map":{"version":3,"names":["board","document","querySelector","playerCemetery","getElementById","enemyCemetery","selectedChecker","parseGridArea","element","row","col","style","gridArea","split","map","Number","addEventListener","event","target","closest","classList","remove","add","moveChecker","cell","startRow","startCol","endRow","endCol","rowDiff","Math","abs","colDiff","middleRow","middleCol","middleCell","querySelectorAll","find","checker","isSameColor","captureChecker","checker1","checker2","contains","appendChild"],"sources":["C:/Users/79650/Desktop/lolkekshahmati/src/DOM/Checkers/Game/Board/CheckerMove.js"],"sourcesContent":["const board = document.querySelector('.Board');\r\nconst playerCemetery = document.getElementById('PlayerCemetry');\r\nconst enemyCemetery = document.getElementById('EnemyCemetry');\r\nlet selectedChecker = null;\r\n\r\n// Helper to parse grid-area style (returns {row, col})\r\nfunction parseGridArea(element) {\r\n    const [row, col] = element.style.gridArea.split(' / ').map(Number);\r\n    return { row, col };\r\n}\r\n\r\n// Select a checker\r\nboard.addEventListener('click', (event) => {\r\n    const target = event.target.closest('.checker');\r\n    if (target && selectedChecker !== target) {\r\n        if (selectedChecker) selectedChecker.classList.remove('selected');\r\n        selectedChecker = target;\r\n        selectedChecker.classList.add('selected');\r\n    } else if (selectedChecker) {\r\n        moveChecker(event);\r\n    }\r\n});\r\n\r\n// Move or jump logic\r\nfunction moveChecker(event) {\r\n    const cell = event.target.closest('.Cell');\r\n    if (!cell || !selectedChecker) return;\r\n\r\n    const { row: startRow, col: startCol } = parseGridArea(selectedChecker);\r\n    const { row: endRow, col: endCol } = parseGridArea(cell);\r\n\r\n    const rowDiff = Math.abs(endRow - startRow);\r\n    const colDiff = Math.abs(endCol - startCol);\r\n\r\n    if (rowDiff === 1 && colDiff === 1) {\r\n        // Simple move\r\n        selectedChecker.style.gridArea = `${endRow} / ${endCol}`;\r\n    } else if (rowDiff === 2 && colDiff === 2) {\r\n        // Jump logic\r\n        const middleRow = (startRow + endRow) / 2;\r\n        const middleCol = (startCol + endCol) / 2;\r\n        const middleCell = [...document.querySelectorAll('.checker')].find(\r\n            checker => {\r\n                const { row, col } = parseGridArea(checker);\r\n                return row === middleRow && col === middleCol && checker !== selectedChecker;\r\n            }\r\n        );\r\n\r\n        if (middleCell && !isSameColor(selectedChecker, middleCell)) {\r\n            // Capture the opponent's checker\r\n            captureChecker(middleCell);\r\n            selectedChecker.style.gridArea = `${endRow} / ${endCol}`;\r\n        }\r\n    }\r\n    selectedChecker.classList.remove('selected');\r\n    selectedChecker = null;\r\n}\r\n\r\n// Check if two checkers are the same color\r\nfunction isSameColor(checker1, checker2) {\r\n    return checker1.classList.contains('black') === checker2.classList.contains('black');\r\n}\r\n\r\n// Capture a checker and move to the cemetery\r\nfunction captureChecker(checker) {\r\n    if (checker.classList.contains('black')) {\r\n        playerCemetery.appendChild(checker);\r\n    } else {\r\n        enemyCemetery.appendChild(checker);\r\n    }\r\n    checker.style.gridArea = ''; // Reset grid-area when moving to cemetery\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}