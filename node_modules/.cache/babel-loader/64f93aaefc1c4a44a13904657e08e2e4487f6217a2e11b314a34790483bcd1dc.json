{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\79650\\\\Desktop\\\\lolkekshahmati\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport Checkers from \"./DOM/Checkers\";\nimport reportWebVitals from './reportWebVitals';\nimport GameModel from \"./GameModel/GameModel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gameModel = new GameModel();\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(Checkers, {\n    GameModel: gameModel\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 5\n}, this));\n\n// Добавляем обработчик после рендеринга\ndocument.addEventListener('DOMContentLoaded', () => {\n  const board = document.querySelector('.Board');\n  if (board) {\n    board.addEventListener('click', event => {\n      const element = event.target.closest('div'); // Находим ближайший <div>\n      if (element) {\n        const computedStyle = window.getComputedStyle(element);\n\n        // Получение grid-area\n        const gridArea = computedStyle.gridArea;\n        if (gridArea !== 'none') {\n          console.log(`Grid Area: ${gridArea}`);\n        } else {\n          console.log('Элемент не имеет grid-area.');\n        }\n\n        // Получение строки и столбца\n        const rowStart = computedStyle.gridRowStart;\n        const columnStart = computedStyle.gridColumnStart;\n        if (rowStart !== 'auto' && columnStart !== 'auto') {\n          console.log(`Row: ${rowStart}, Column: ${columnStart}`);\n        } else {\n          console.log('Элемент не расположен на сетке.');\n        }\n      }\n    });\n  } else {\n    console.error('Элемент с классом .Board не найден.');\n  }\n});\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","Checkers","reportWebVitals","GameModel","jsxDEV","_jsxDEV","gameModel","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","addEventListener","board","querySelector","event","element","target","closest","computedStyle","window","getComputedStyle","gridArea","console","log","rowStart","gridRowStart","columnStart","gridColumnStart","error"],"sources":["C:/Users/79650/Desktop/lolkekshahmati/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport Checkers from \"./DOM/Checkers\";\nimport reportWebVitals from './reportWebVitals';\nimport GameModel from \"./GameModel/GameModel\";\n\nconst gameModel = new GameModel();\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n        <Checkers GameModel={gameModel} />\n    </React.StrictMode>\n);\n\n// Добавляем обработчик после рендеринга\ndocument.addEventListener('DOMContentLoaded', () => {\n    const board = document.querySelector('.Board');\n    if (board) {\n        board.addEventListener('click', (event) => {\n            const element = event.target.closest('div'); // Находим ближайший <div>\n            if (element) {\n                const computedStyle = window.getComputedStyle(element);\n\n                // Получение grid-area\n                const gridArea = computedStyle.gridArea;\n                if (gridArea !== 'none') {\n                    console.log(`Grid Area: ${gridArea}`);\n                } else {\n                    console.log('Элемент не имеет grid-area.');\n                }\n\n                // Получение строки и столбца\n                const rowStart = computedStyle.gridRowStart;\n                const columnStart = computedStyle.gridColumnStart;\n                if (rowStart !== 'auto' && columnStart !== 'auto') {\n                    console.log(`Row: ${rowStart}, Column: ${columnStart}`);\n                } else {\n                    console.log('Элемент не расположен на сетке.');\n                }\n            }\n        });\n    } else {\n        console.error('Элемент с классом .Board не найден.');\n    }\n});\n\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,SAAS,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,SAAS,GAAG,IAAIH,SAAS,CAAC,CAAC;AAEjC,MAAMI,IAAI,GAAGP,QAAQ,CAACQ,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,cACPN,OAAA,CAACN,KAAK,CAACa,UAAU;EAAAC,QAAA,eACbR,OAAA,CAACJ,QAAQ;IAACE,SAAS,EAAEG;EAAU;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACpB,CACtB,CAAC;;AAED;AACAR,QAAQ,CAACS,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;EAChD,MAAMC,KAAK,GAAGV,QAAQ,CAACW,aAAa,CAAC,QAAQ,CAAC;EAC9C,IAAID,KAAK,EAAE;IACPA,KAAK,CAACD,gBAAgB,CAAC,OAAO,EAAGG,KAAK,IAAK;MACvC,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAACC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;MAC7C,IAAIF,OAAO,EAAE;QACT,MAAMG,aAAa,GAAGC,MAAM,CAACC,gBAAgB,CAACL,OAAO,CAAC;;QAEtD;QACA,MAAMM,QAAQ,GAAGH,aAAa,CAACG,QAAQ;QACvC,IAAIA,QAAQ,KAAK,MAAM,EAAE;UACrBC,OAAO,CAACC,GAAG,CAAC,cAAcF,QAAQ,EAAE,CAAC;QACzC,CAAC,MAAM;UACHC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC9C;;QAEA;QACA,MAAMC,QAAQ,GAAGN,aAAa,CAACO,YAAY;QAC3C,MAAMC,WAAW,GAAGR,aAAa,CAACS,eAAe;QACjD,IAAIH,QAAQ,KAAK,MAAM,IAAIE,WAAW,KAAK,MAAM,EAAE;UAC/CJ,OAAO,CAACC,GAAG,CAAC,QAAQC,QAAQ,aAAaE,WAAW,EAAE,CAAC;QAC3D,CAAC,MAAM;UACHJ,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAClD;MACJ;IACJ,CAAC,CAAC;EACN,CAAC,MAAM;IACHD,OAAO,CAACM,KAAK,CAAC,qCAAqC,CAAC;EACxD;AACJ,CAAC,CAAC;AAEFjC,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}