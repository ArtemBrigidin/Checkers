{"ast":null,"code":"let selectedChecker = null; // Выбранная шашка\n\ndocument.addEventListener(\"click\", event => {\n  const cell = event.target.closest(\".Cell\"); // Клетка, на которую кликнули\n  const checker = event.target.closest(\".checker\"); // Шашка, на которую кликнули\n\n  // Если кликнули по шашке, выбираем её\n  if (checker) {\n    console.log(\"Checker selected:\", checker);\n    if (selectedChecker) selectedChecker.classList.remove(\"selected\"); // Убираем выделение с предыдущей шашки\n    selectedChecker = checker;\n    selectedChecker.classList.add(\"selected\"); // Выделяем текущую шашку\n  }\n  // Если кликнули по клетке и шашка выбрана, пробуем переместить её\n  else if (cell && selectedChecker) {\n    console.log(\"Target cell clicked:\", cell);\n    const currentCell = selectedChecker.closest(\".Cell\"); // Текущая клетка шашки\n    if (!currentCell) {\n      console.log(\"No current cell found for selected checker.\");\n      return; // Если не удалось найти текущую клетку, выходим\n    }\n    console.log(\"Current cell of checker:\", currentCell);\n    if (isMoveValid(currentCell, cell, selectedChecker)) {\n      // Проверяем, что ход валиден\n      console.log(\"Move is valid!\");\n      const jumpedCell = getJumpedCell(currentCell, cell); // Проверка на прыжок через шашку\n      if (jumpedCell) {\n        const jumpedChecker = jumpedCell.querySelector(\".checker\"); // Шашка, через которую прыгаем\n        if (jumpedChecker) {\n          console.log(\"Removing jumped checker:\", jumpedChecker);\n          jumpedChecker.remove(); // Удаляем шашку, через которую прыгнули\n        }\n      }\n      console.log(\"Moving checker to target cell.\");\n      cell.appendChild(selectedChecker); // Перемещаем шашку в целевую клетку\n      selectedChecker.classList.remove(\"selected\"); // Убираем выделение\n      selectedChecker = null; // Сбрасываем выбранную шашку\n    } else {\n      console.log(\"Move is not valid.\");\n    }\n  } else {\n    console.log(\"No checker or cell interaction detected.\");\n  }\n});\n\n// Функция для проверки валидности хода\nfunction isMoveValid(currentCell, targetCell, checker) {\n  if (!currentCell || !targetCell) return false;\n  const currentRow = parseInt(currentCell.dataset.row); // Текущая строка\n  const currentCol = parseInt(currentCell.dataset.col); // Текущий столбец\n  const targetRow = parseInt(targetCell.dataset.row); // Строка целевой клетки\n  const targetCol = parseInt(targetCell.dataset.col); // Столбец целевой клетки\n\n  const rowDiff = Math.abs(targetRow - currentRow); // Разница по строкам\n  const colDiff = Math.abs(targetCol - currentCol); // Разница по столбцам\n\n  console.log(`Row Diff: ${rowDiff}, Col Diff: ${colDiff}`);\n\n  // Проверяем, что целевая клетка пуста\n  if (targetCell.querySelector(\".checker\")) return false;\n\n  // Проверяем обычный ход (на одну клетку по диагонали)\n  if (rowDiff === 1 && colDiff === 1) {\n    return true;\n  }\n\n  // Проверяем прыжок через шашку (на две клетки по диагонали)\n  if (rowDiff === 2 && colDiff === 2) {\n    const jumpedCell = getJumpedCell(currentCell, targetCell);\n    if (jumpedCell && jumpedCell.querySelector(\".checker\")) {\n      return true; // Ход возможен, если через клетку есть шашка\n    }\n  }\n  return false; // Если ход не соответствует ни одному из условий\n}\n\n// Функция для поиска клетки, через которую происходит прыжок\nfunction getJumpedCell(currentCell, targetCell) {\n  if (!currentCell || !targetCell) return null;\n  const currentRow = parseInt(currentCell.dataset.row); // Текущая строка\n  const currentCol = parseInt(currentCell.dataset.col); // Текущий столбец\n  const targetRow = parseInt(targetCell.dataset.row); // Строка целевой клетки\n  const targetCol = parseInt(targetCell.dataset.col); // Столбец целевой клетки\n\n  const jumpedRow = (currentRow + targetRow) / 2; // Строка промежуточной клетки\n  const jumpedCol = (currentCol + targetCol) / 2; // Столбец промежуточной клетки\n\n  console.log(`Jumped Row: ${jumpedRow}, Jumped Col: ${jumpedCol}`);\n  return document.querySelector(`.Cell[data-row=\"${jumpedRow}\"][data-col=\"${jumpedCol}\"]`); // Находим и возвращаем промежуточную клетку\n}\n\n// Добавление атрибутов data-row и data-col для каждой клетки\ndocument.querySelectorAll('.Cell').forEach((cell, index) => {\n  const row = Math.floor(index / 8) + 1; // Строка клетки\n  const col = index % 8 + 1; // Столбец клетки\n  cell.dataset.row = row;\n  cell.dataset.col = col;\n});","map":{"version":3,"names":["selectedChecker","document","addEventListener","event","cell","target","closest","checker","console","log","classList","remove","add","currentCell","isMoveValid","jumpedCell","getJumpedCell","jumpedChecker","querySelector","appendChild","targetCell","currentRow","parseInt","dataset","row","currentCol","col","targetRow","targetCol","rowDiff","Math","abs","colDiff","jumpedRow","jumpedCol","querySelectorAll","forEach","index","floor"],"sources":["C:/Users/79650/Desktop/lolkekshahmati/src/DOM/Checkers/Game/Board/CheckerMove.js"],"sourcesContent":["let selectedChecker = null; // Выбранная шашка\r\n\r\ndocument.addEventListener(\"click\", (event) => {\r\n    const cell = event.target.closest(\".Cell\"); // Клетка, на которую кликнули\r\n    const checker = event.target.closest(\".checker\"); // Шашка, на которую кликнули\r\n\r\n    // Если кликнули по шашке, выбираем её\r\n    if (checker) {\r\n        console.log(\"Checker selected:\", checker);\r\n        if (selectedChecker) selectedChecker.classList.remove(\"selected\"); // Убираем выделение с предыдущей шашки\r\n        selectedChecker = checker;\r\n        selectedChecker.classList.add(\"selected\"); // Выделяем текущую шашку\r\n    }\r\n    // Если кликнули по клетке и шашка выбрана, пробуем переместить её\r\n    else if (cell && selectedChecker) {\r\n        console.log(\"Target cell clicked:\", cell);\r\n        const currentCell = selectedChecker.closest(\".Cell\"); // Текущая клетка шашки\r\n        if (!currentCell) {\r\n            console.log(\"No current cell found for selected checker.\");\r\n            return; // Если не удалось найти текущую клетку, выходим\r\n        }\r\n        console.log(\"Current cell of checker:\", currentCell);\r\n\r\n        if (isMoveValid(currentCell, cell, selectedChecker)) { // Проверяем, что ход валиден\r\n            console.log(\"Move is valid!\");\r\n            const jumpedCell = getJumpedCell(currentCell, cell); // Проверка на прыжок через шашку\r\n            if (jumpedCell) {\r\n                const jumpedChecker = jumpedCell.querySelector(\".checker\"); // Шашка, через которую прыгаем\r\n                if (jumpedChecker) {\r\n                    console.log(\"Removing jumped checker:\", jumpedChecker);\r\n                    jumpedChecker.remove(); // Удаляем шашку, через которую прыгнули\r\n                }\r\n            }\r\n\r\n            console.log(\"Moving checker to target cell.\");\r\n            cell.appendChild(selectedChecker); // Перемещаем шашку в целевую клетку\r\n            selectedChecker.classList.remove(\"selected\"); // Убираем выделение\r\n            selectedChecker = null; // Сбрасываем выбранную шашку\r\n        } else {\r\n            console.log(\"Move is not valid.\");\r\n        }\r\n    } else {\r\n        console.log(\"No checker or cell interaction detected.\");\r\n    }\r\n});\r\n\r\n// Функция для проверки валидности хода\r\nfunction isMoveValid(currentCell, targetCell, checker) {\r\n    if (!currentCell || !targetCell) return false;\r\n\r\n    const currentRow = parseInt(currentCell.dataset.row); // Текущая строка\r\n    const currentCol = parseInt(currentCell.dataset.col); // Текущий столбец\r\n    const targetRow = parseInt(targetCell.dataset.row); // Строка целевой клетки\r\n    const targetCol = parseInt(targetCell.dataset.col); // Столбец целевой клетки\r\n\r\n    const rowDiff = Math.abs(targetRow - currentRow); // Разница по строкам\r\n    const colDiff = Math.abs(targetCol - currentCol); // Разница по столбцам\r\n\r\n    console.log(`Row Diff: ${rowDiff}, Col Diff: ${colDiff}`);\r\n\r\n    // Проверяем, что целевая клетка пуста\r\n    if (targetCell.querySelector(\".checker\")) return false;\r\n\r\n    // Проверяем обычный ход (на одну клетку по диагонали)\r\n    if (rowDiff === 1 && colDiff === 1) {\r\n        return true;\r\n    }\r\n\r\n    // Проверяем прыжок через шашку (на две клетки по диагонали)\r\n    if (rowDiff === 2 && colDiff === 2) {\r\n        const jumpedCell = getJumpedCell(currentCell, targetCell);\r\n        if (jumpedCell && jumpedCell.querySelector(\".checker\")) {\r\n            return true; // Ход возможен, если через клетку есть шашка\r\n        }\r\n    }\r\n\r\n    return false; // Если ход не соответствует ни одному из условий\r\n}\r\n\r\n// Функция для поиска клетки, через которую происходит прыжок\r\nfunction getJumpedCell(currentCell, targetCell) {\r\n    if (!currentCell || !targetCell) return null;\r\n\r\n    const currentRow = parseInt(currentCell.dataset.row); // Текущая строка\r\n    const currentCol = parseInt(currentCell.dataset.col); // Текущий столбец\r\n    const targetRow = parseInt(targetCell.dataset.row); // Строка целевой клетки\r\n    const targetCol = parseInt(targetCell.dataset.col); // Столбец целевой клетки\r\n\r\n    const jumpedRow = (currentRow + targetRow) / 2; // Строка промежуточной клетки\r\n    const jumpedCol = (currentCol + targetCol) / 2; // Столбец промежуточной клетки\r\n\r\n    console.log(`Jumped Row: ${jumpedRow}, Jumped Col: ${jumpedCol}`);\r\n\r\n    return document.querySelector(\r\n        `.Cell[data-row=\"${jumpedRow}\"][data-col=\"${jumpedCol}\"]`\r\n    ); // Находим и возвращаем промежуточную клетку\r\n}\r\n\r\n// Добавление атрибутов data-row и data-col для каждой клетки\r\ndocument.querySelectorAll('.Cell').forEach((cell, index) => {\r\n    const row = Math.floor(index / 8) + 1; // Строка клетки\r\n    const col = (index % 8) + 1; // Столбец клетки\r\n    cell.dataset.row = row;\r\n    cell.dataset.col = col;\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}