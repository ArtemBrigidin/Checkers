{"ast":null,"code":"document.addEventListener('DOMContentLoaded', () => {\n  console.log('DOM полностью загружен');\n  const board = document.getElementById('Board');\n  const playerCemetery = document.getElementById('PlayerCemetry');\n  const enemyCemetery = document.getElementById('EnemyCemetry');\n  let selectedChecker = null;\n  console.log('Board:', board);\n  console.log('Player Cemetery:', playerCemetery);\n  console.log('Enemy Cemetery:', enemyCemetery);\n\n  // Создаем доску и шашки\n  createBoard();\n  function createBoard() {\n    for (let row = 1; row <= 8; row++) {\n      for (let col = 1; col <= 8; col++) {\n        const cell = document.createElement('div');\n        cell.classList.add('Cell');\n        cell.style.gridArea = `${row} / ${col}`;\n        board.appendChild(cell);\n\n        // Расставляем шашки только на черных клетках\n        if ((row + col) % 2 === 0) {\n          const checker = document.createElement('div');\n          checker.classList.add('checker');\n          checker.style.gridArea = `${row} / ${col}`;\n          checker.classList.add(row < 4 ? 'white' : row > 5 ? 'black' : '');\n          if (checker.classList.contains('black') || checker.classList.contains('white')) {\n            board.appendChild(checker);\n          }\n        }\n      }\n    }\n  }\n  board.addEventListener('click', event => {\n    const target = event.target.closest('.checker');\n    if (target && selectedChecker !== target) {\n      if (selectedChecker) selectedChecker.classList.remove('selected');\n      selectedChecker = target;\n      selectedChecker.classList.add('selected');\n    } else if (selectedChecker) {\n      moveChecker(event);\n    }\n  });\n  function parseGridArea(element) {\n    const [row, col] = element.style.gridArea.split(' / ').map(Number);\n    return {\n      row,\n      col\n    };\n  }\n  function moveChecker(event) {\n    const cell = event.target.closest('.Cell');\n    if (!cell || !selectedChecker) return;\n    const {\n      row: startRow,\n      col: startCol\n    } = parseGridArea(selectedChecker);\n    const {\n      row: endRow,\n      col: endCol\n    } = parseGridArea(cell);\n    const rowDiff = Math.abs(endRow - startRow);\n    const colDiff = Math.abs(endCol - startCol);\n    if (rowDiff === 1 && colDiff === 1) {\n      selectedChecker.style.gridArea = `${endRow} / ${endCol}`;\n    } else if (rowDiff === 2 && colDiff === 2) {\n      const middleRow = (startRow + endRow) / 2;\n      const middleCol = (startCol + endCol) / 2;\n      const middleChecker = [...document.querySelectorAll('.checker')].find(checker => {\n        const {\n          row,\n          col\n        } = parseGridArea(checker);\n        return row === middleRow && col === middleCol && checker !== selectedChecker;\n      });\n      if (middleChecker && !isSameColor(selectedChecker, middleChecker)) {\n        captureChecker(middleChecker);\n        selectedChecker.style.gridArea = `${endRow} / ${endCol}`;\n      }\n    }\n    selectedChecker.classList.remove('selected');\n    selectedChecker = null;\n  }\n  function isSameColor(checker1, checker2) {\n    return checker1.classList.contains('black') === checker2.classList.contains('black');\n  }\n  function captureChecker(checker) {\n    if (checker.classList.contains('black')) {\n      playerCemetery.appendChild(checker);\n    } else {\n      enemyCemetery.appendChild(checker);\n    }\n    checker.style.gridArea = ''; // Сбрасываем позицию при перемещении в кладбище\n  }\n});","map":{"version":3,"names":["document","addEventListener","console","log","board","getElementById","playerCemetery","enemyCemetery","selectedChecker","createBoard","row","col","cell","createElement","classList","add","style","gridArea","appendChild","checker","contains","event","target","closest","remove","moveChecker","parseGridArea","element","split","map","Number","startRow","startCol","endRow","endCol","rowDiff","Math","abs","colDiff","middleRow","middleCol","middleChecker","querySelectorAll","find","isSameColor","captureChecker","checker1","checker2"],"sources":["C:/Users/79650/Desktop/lolkekshahmati/src/DOM/Checkers/Game/Board/CheckerMove.js"],"sourcesContent":["\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    console.log('DOM полностью загружен');\r\n\r\n    const board = document.getElementById('Board');\r\n    const playerCemetery = document.getElementById('PlayerCemetry');\r\n    const enemyCemetery = document.getElementById('EnemyCemetry');\r\n    let selectedChecker = null;\r\n\r\n    console.log('Board:', board);\r\n    console.log('Player Cemetery:', playerCemetery);\r\n    console.log('Enemy Cemetery:', enemyCemetery);\r\n\r\n    // Создаем доску и шашки\r\n    createBoard();\r\n\r\n    function createBoard() {\r\n        for (let row = 1; row <= 8; row++) {\r\n            for (let col = 1; col <= 8; col++) {\r\n                const cell = document.createElement('div');\r\n                cell.classList.add('Cell');\r\n                cell.style.gridArea = `${row} / ${col}`;\r\n                board.appendChild(cell);\r\n\r\n                // Расставляем шашки только на черных клетках\r\n                if ((row + col) % 2 === 0) {\r\n                    const checker = document.createElement('div');\r\n                    checker.classList.add('checker');\r\n                    checker.style.gridArea = `${row} / ${col}`;\r\n                    checker.classList.add(row < 4 ? 'white' : row > 5 ? 'black' : '');\r\n                    if (checker.classList.contains('black') || checker.classList.contains('white')) {\r\n                        board.appendChild(checker);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    board.addEventListener('click', (event) => {\r\n        const target = event.target.closest('.checker');\r\n        if (target && selectedChecker !== target) {\r\n            if (selectedChecker) selectedChecker.classList.remove('selected');\r\n            selectedChecker = target;\r\n            selectedChecker.classList.add('selected');\r\n        } else if (selectedChecker) {\r\n            moveChecker(event);\r\n        }\r\n    });\r\n\r\n    function parseGridArea(element) {\r\n        const [row, col] = element.style.gridArea.split(' / ').map(Number);\r\n        return { row, col };\r\n    }\r\n\r\n    function moveChecker(event) {\r\n        const cell = event.target.closest('.Cell');\r\n        if (!cell || !selectedChecker) return;\r\n\r\n        const { row: startRow, col: startCol } = parseGridArea(selectedChecker);\r\n        const { row: endRow, col: endCol } = parseGridArea(cell);\r\n\r\n        const rowDiff = Math.abs(endRow - startRow);\r\n        const colDiff = Math.abs(endCol - startCol);\r\n\r\n        if (rowDiff === 1 && colDiff === 1) {\r\n            selectedChecker.style.gridArea = `${endRow} / ${endCol}`;\r\n        } else if (rowDiff === 2 && colDiff === 2) {\r\n            const middleRow = (startRow + endRow) / 2;\r\n            const middleCol = (startCol + endCol) / 2;\r\n            const middleChecker = [...document.querySelectorAll('.checker')].find(checker => {\r\n                const { row, col } = parseGridArea(checker);\r\n                return row === middleRow && col === middleCol && checker !== selectedChecker;\r\n            });\r\n\r\n            if (middleChecker && !isSameColor(selectedChecker, middleChecker)) {\r\n                captureChecker(middleChecker);\r\n                selectedChecker.style.gridArea = `${endRow} / ${endCol}`;\r\n            }\r\n        }\r\n        selectedChecker.classList.remove('selected');\r\n        selectedChecker = null;\r\n    }\r\n\r\n    function isSameColor(checker1, checker2) {\r\n        return checker1.classList.contains('black') === checker2.classList.contains('black');\r\n    }\r\n\r\n    function captureChecker(checker) {\r\n        if (checker.classList.contains('black')) {\r\n            playerCemetery.appendChild(checker);\r\n        } else {\r\n            enemyCemetery.appendChild(checker);\r\n        }\r\n        checker.style.gridArea = ''; // Сбрасываем позицию при перемещении в кладбище\r\n    }\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}