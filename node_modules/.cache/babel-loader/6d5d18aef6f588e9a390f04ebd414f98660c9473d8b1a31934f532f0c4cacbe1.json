{"ast":null,"code":"// Переменная для выбранной шашки\nlet selectedChecker = null;\ndocument.addEventListener(\"click\", event => {\n  const cell = event.target.closest(\".Cell\");\n  const checker = event.target.closest(\".checker\");\n  if (checker) {\n    // Выделяем шашку\n    if (selectedChecker) selectedChecker.classList.remove(\"selected\");\n    selectedChecker = checker;\n    selectedChecker.classList.add(\"selected\");\n    console.log(\"Checker selected:\", selectedChecker);\n  } else if (cell && selectedChecker) {\n    // Получаем текущую позицию шашки из её grid-area\n    const currentGridArea = window.getComputedStyle(selectedChecker).gridArea;\n    const targetGridArea = window.getComputedStyle(cell).gridArea;\n    console.log(\"currentGridArea:\", currentGridArea);\n    console.log(\"targetGridArea:\", targetGridArea);\n\n    // Проверяем, можно ли переместить шашку\n    if (isMoveValid(currentGridArea, targetGridArea, selectedChecker)) {\n      console.log(\"Move is valid\");\n\n      // Если прыжок через шашку — удаляем её\n      const jumpedCell = getJumpedCell(currentGridArea, targetGridArea);\n      if (jumpedCell) {\n        const jumpedChecker = jumpedCell.querySelector(\".checker\");\n        if (jumpedChecker) {\n          console.log(\"Jumped Checker Removed\");\n          jumpedChecker.remove();\n        }\n      }\n\n      // Перемещаем шашку\n      cell.appendChild(selectedChecker);\n      selectedChecker.classList.remove(\"selected\");\n      selectedChecker = null;\n      console.log(\"Checker moved\");\n    } else {\n      console.log(\"Move is invalid\");\n    }\n  }\n});\nfunction isMoveValid(currentGridArea, targetGridArea, checker) {\n  console.log(\"Validating move...\");\n  console.log(`currentGridArea: ${currentGridArea}`);\n  console.log(`targetGridArea: ${targetGridArea}`);\n\n  // Парсим координаты\n  const [currentRow, currentCol] = parseGridArea(currentGridArea);\n  const [targetRow, targetCol] = parseGridArea(targetGridArea);\n  console.log(`currentRow: ${currentRow}, currentCol: ${currentCol}`);\n  console.log(`targetRow: ${targetRow}, targetCol: ${targetCol}`);\n  const rowDiff = Math.abs(targetRow - currentRow);\n  const colDiff = Math.abs(targetCol - currentCol);\n\n  // Находим целевую клетку, используя правильный селектор\n  const targetCell = document.querySelector(`[style*=\"grid-area: ${targetRow} / ${targetCol};\"]`);\n  console.log(\"Target cell: \", targetCell);\n  if (targetCell) {\n    const targetChecker = targetCell.querySelector(\".checker\");\n    console.log(\"Target checker: \", targetChecker);\n\n    // Проверяем, что клетка пуста\n    if (!targetChecker) {\n      // Проверяем обычный ход (диагональный)\n      if (rowDiff === 1 && colDiff === 1) {\n        console.log(\"Valid move: Simple move.\");\n        return true;\n      }\n\n      // Проверяем прыжок через шашку (диагональный прыжок через одну клетку)\n      if (rowDiff === 2 && colDiff === 2) {\n        console.log(\"Checking for jump...\");\n        const jumpedCell = getJumpedCell(currentRow, currentCol, targetRow, targetCol);\n        console.log(\"Jumped cell: \", jumpedCell);\n        if (jumpedCell) {\n          const jumpedChecker = jumpedCell.querySelector(\".checker\");\n          console.log(\"Jumped checker: \", jumpedChecker);\n          if (jumpedChecker) {\n            console.log(\"Jumped Checker Removed\");\n            jumpedChecker.remove(); // Удаляем шашку, через которую прыгнули\n            return true;\n          }\n        } else {\n          console.log(\"No jumped checker found.\");\n        }\n      }\n    } else {\n      console.log(\"Target cell is occupied by another checker.\");\n    }\n  } else {\n    console.log(\"Target cell is invalid.\");\n  }\n  return false; // Если не прошло проверку, ход невалиден\n}\nfunction getJumpedCell(currentRow, currentCol, targetRow, targetCol) {\n  console.log(\"getJumpedCell called\");\n\n  // Вычисляем промежуточные координаты\n  const jumpedRow = (currentRow + targetRow) / 2;\n  const jumpedCol = (currentCol + targetCol) / 2;\n  console.log(`jumpedRow: ${jumpedRow}, jumpedCol: ${jumpedCol}`);\n\n  // Находим промежуточную ячейку с помощью grid-area\n  return findCellByGridArea(jumpedRow, jumpedCol);\n}\nfunction parseGridArea(gridArea) {\n  const parts = gridArea.split(\" / \").map(part => parseInt(part.trim(), 10));\n  return [parts[0], parts[1]]; // row-start и col-start\n}\nfunction findCellByGridArea(row, col) {\n  console.log(`Searching for cell at row=${row}, col=${col}`);\n  return Array.from(document.querySelectorAll(\".Cell\")).find(cell => {\n    const gridArea = window.getComputedStyle(cell).gridArea;\n    const [cellRow, cellCol] = parseGridArea(gridArea);\n    console.log(`Checking cell with gridArea: row=${cellRow}, col=${cellCol}`);\n    return cellRow === row && cellCol === col;\n  });\n}","map":{"version":3,"names":["selectedChecker","document","addEventListener","event","cell","target","closest","checker","classList","remove","add","console","log","currentGridArea","window","getComputedStyle","gridArea","targetGridArea","isMoveValid","jumpedCell","getJumpedCell","jumpedChecker","querySelector","appendChild","currentRow","currentCol","parseGridArea","targetRow","targetCol","rowDiff","Math","abs","colDiff","targetCell","targetChecker","jumpedRow","jumpedCol","findCellByGridArea","parts","split","map","part","parseInt","trim","row","col","Array","from","querySelectorAll","find","cellRow","cellCol"],"sources":["C:/Users/79650/Desktop/lolkekshahmati/src/DOM/Checkers/Game/Board/CheckerMove.js"],"sourcesContent":["// Переменная для выбранной шашки\r\nlet selectedChecker = null;\r\n\r\ndocument.addEventListener(\"click\", (event) => {\r\n    const cell = event.target.closest(\".Cell\");\r\n    const checker = event.target.closest(\".checker\");\r\n\r\n    if (checker) {\r\n        // Выделяем шашку\r\n        if (selectedChecker) selectedChecker.classList.remove(\"selected\");\r\n        selectedChecker = checker;\r\n        selectedChecker.classList.add(\"selected\");\r\n        console.log(\"Checker selected:\", selectedChecker);\r\n    } else if (cell && selectedChecker) {\r\n        // Получаем текущую позицию шашки из её grid-area\r\n        const currentGridArea = window.getComputedStyle(selectedChecker).gridArea;\r\n        const targetGridArea = window.getComputedStyle(cell).gridArea;\r\n\r\n        console.log(\"currentGridArea:\", currentGridArea);\r\n        console.log(\"targetGridArea:\", targetGridArea);\r\n\r\n        // Проверяем, можно ли переместить шашку\r\n        if (isMoveValid(currentGridArea, targetGridArea, selectedChecker)) {\r\n            console.log(\"Move is valid\");\r\n\r\n            // Если прыжок через шашку — удаляем её\r\n            const jumpedCell = getJumpedCell(currentGridArea, targetGridArea);\r\n            if (jumpedCell) {\r\n                const jumpedChecker = jumpedCell.querySelector(\".checker\");\r\n                if (jumpedChecker) {\r\n                    console.log(\"Jumped Checker Removed\");\r\n                    jumpedChecker.remove();\r\n                }\r\n            }\r\n\r\n            // Перемещаем шашку\r\n            cell.appendChild(selectedChecker);\r\n            selectedChecker.classList.remove(\"selected\");\r\n            selectedChecker = null;\r\n\r\n            console.log(\"Checker moved\");\r\n        } else {\r\n            console.log(\"Move is invalid\");\r\n        }\r\n    }\r\n});\r\n\r\nfunction isMoveValid(currentGridArea, targetGridArea, checker) {\r\n    console.log(\"Validating move...\");\r\n    console.log(`currentGridArea: ${currentGridArea}`);\r\n    console.log(`targetGridArea: ${targetGridArea}`);\r\n\r\n    // Парсим координаты\r\n    const [currentRow, currentCol] = parseGridArea(currentGridArea);\r\n    const [targetRow, targetCol] = parseGridArea(targetGridArea);\r\n\r\n    console.log(`currentRow: ${currentRow}, currentCol: ${currentCol}`);\r\n    console.log(`targetRow: ${targetRow}, targetCol: ${targetCol}`);\r\n\r\n    const rowDiff = Math.abs(targetRow - currentRow);\r\n    const colDiff = Math.abs(targetCol - currentCol);\r\n\r\n    // Находим целевую клетку, используя правильный селектор\r\n    const targetCell = document.querySelector(`[style*=\"grid-area: ${targetRow} / ${targetCol};\"]`);\r\n    console.log(\"Target cell: \", targetCell);\r\n\r\n    if (targetCell) {\r\n        const targetChecker = targetCell.querySelector(\".checker\");\r\n        console.log(\"Target checker: \", targetChecker);\r\n\r\n        // Проверяем, что клетка пуста\r\n        if (!targetChecker) {\r\n            // Проверяем обычный ход (диагональный)\r\n            if (rowDiff === 1 && colDiff === 1) {\r\n                console.log(\"Valid move: Simple move.\");\r\n                return true;\r\n            }\r\n\r\n            // Проверяем прыжок через шашку (диагональный прыжок через одну клетку)\r\n            if (rowDiff === 2 && colDiff === 2) {\r\n                console.log(\"Checking for jump...\");\r\n\r\n                const jumpedCell = getJumpedCell(currentRow, currentCol, targetRow, targetCol);\r\n                console.log(\"Jumped cell: \", jumpedCell);\r\n\r\n                if (jumpedCell) {\r\n                    const jumpedChecker = jumpedCell.querySelector(\".checker\");\r\n                    console.log(\"Jumped checker: \", jumpedChecker);\r\n\r\n                    if (jumpedChecker) {\r\n                        console.log(\"Jumped Checker Removed\");\r\n                        jumpedChecker.remove();  // Удаляем шашку, через которую прыгнули\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    console.log(\"No jumped checker found.\");\r\n                }\r\n            }\r\n        } else {\r\n            console.log(\"Target cell is occupied by another checker.\");\r\n        }\r\n    } else {\r\n        console.log(\"Target cell is invalid.\");\r\n    }\r\n\r\n    return false;  // Если не прошло проверку, ход невалиден\r\n}\r\n\r\n\r\nfunction getJumpedCell(currentRow, currentCol, targetRow, targetCol) {\r\n    console.log(\"getJumpedCell called\");\r\n\r\n    // Вычисляем промежуточные координаты\r\n    const jumpedRow = (currentRow + targetRow) / 2;\r\n    const jumpedCol = (currentCol + targetCol) / 2;\r\n\r\n    console.log(`jumpedRow: ${jumpedRow}, jumpedCol: ${jumpedCol}`);\r\n\r\n    // Находим промежуточную ячейку с помощью grid-area\r\n    return findCellByGridArea(jumpedRow, jumpedCol);\r\n}\r\n\r\nfunction parseGridArea(gridArea) {\r\n    const parts = gridArea.split(\" / \").map(part => parseInt(part.trim(), 10));\r\n    return [parts[0], parts[1]]; // row-start и col-start\r\n}\r\n\r\nfunction findCellByGridArea(row, col) {\r\n    console.log(`Searching for cell at row=${row}, col=${col}`);\r\n    return Array.from(document.querySelectorAll(\".Cell\")).find(cell => {\r\n        const gridArea = window.getComputedStyle(cell).gridArea;\r\n        const [cellRow, cellCol] = parseGridArea(gridArea);\r\n        console.log(`Checking cell with gridArea: row=${cellRow}, col=${cellCol}`);\r\n        return cellRow === row && cellCol === col;\r\n    });\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}