{"ast":null,"code":"document.addEventListener('DOMContentLoaded', () => {\n  const board = document.querySelector('.Board');\n  const playerCemetery = document.getElementById('PlayerCemetry');\n  const enemyCemetery = document.getElementById('EnemyCemetry');\n  let selectedChecker = null;\n\n  // Helper to parse grid-area style (returns {row, col})\n  function parseGridArea(element) {\n    const [row, col] = element.style.gridArea.split(' / ').map(Number);\n    return {\n      row,\n      col\n    };\n  }\n\n  // Select a checker\n  board.addEventListener('click', event => {\n    const target = event.target.closest('.checker');\n    if (target && selectedChecker !== target) {\n      if (selectedChecker) selectedChecker.classList.remove('selected');\n      selectedChecker = target;\n      selectedChecker.classList.add('selected');\n    } else if (selectedChecker) {\n      moveChecker(event);\n    }\n  });\n\n  // Move or jump logic\n  function moveChecker(event) {\n    const cell = event.target.closest('.Cell');\n    if (!cell || !selectedChecker) return;\n    const {\n      row: startRow,\n      col: startCol\n    } = parseGridArea(selectedChecker);\n    const {\n      row: endRow,\n      col: endCol\n    } = parseGridArea(cell);\n    const rowDiff = Math.abs(endRow - startRow);\n    const colDiff = Math.abs(endCol - startCol);\n    if (rowDiff === 1 && colDiff === 1) {\n      // Simple move\n      selectedChecker.style.gridArea = `${endRow} / ${endCol}`;\n    } else if (rowDiff === 2 && colDiff === 2) {\n      // Jump logic\n      const middleRow = (startRow + endRow) / 2;\n      const middleCol = (startCol + endCol) / 2;\n      const middleCell = [...document.querySelectorAll('.checker')].find(checker => {\n        const {\n          row,\n          col\n        } = parseGridArea(checker);\n        return row === middleRow && col === middleCol && checker !== selectedChecker;\n      });\n      if (middleCell && !isSameColor(selectedChecker, middleCell)) {\n        // Capture the opponent's checker\n        captureChecker(middleCell);\n        selectedChecker.style.gridArea = `${endRow} / ${endCol}`;\n      }\n    }\n    selectedChecker.classList.remove('selected');\n    selectedChecker = null;\n  }\n\n  // Check if two checkers are the same color\n  function isSameColor(checker1, checker2) {\n    return checker1.classList.contains('black') === checker2.classList.contains('black');\n  }\n\n  // Capture a checker and move to the cemetery\n  function captureChecker(checker) {\n    if (checker.classList.contains('black')) {\n      playerCemetery.appendChild(checker);\n    } else {\n      enemyCemetery.appendChild(checker);\n    }\n    checker.style.gridArea = ''; // Reset grid-area when moving to cemetery\n  }\n  console.log(board); // Should not be null\n  console.log(playerCemetery); // Should not be null\n  console.log(enemyCemetery); // Should not be null\n});","map":{"version":3,"names":["document","addEventListener","board","querySelector","playerCemetery","getElementById","enemyCemetery","selectedChecker","parseGridArea","element","row","col","style","gridArea","split","map","Number","event","target","closest","classList","remove","add","moveChecker","cell","startRow","startCol","endRow","endCol","rowDiff","Math","abs","colDiff","middleRow","middleCol","middleCell","querySelectorAll","find","checker","isSameColor","captureChecker","checker1","checker2","contains","appendChild","console","log"],"sources":["C:/Users/79650/Desktop/lolkekshahmati/src/DOM/Checkers/Game/Board/CheckerMove.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\nconst board = document.querySelector('.Board');\r\nconst playerCemetery = document.getElementById('PlayerCemetry');\r\nconst enemyCemetery = document.getElementById('EnemyCemetry');\r\nlet selectedChecker = null;\r\n\r\n// Helper to parse grid-area style (returns {row, col})\r\nfunction parseGridArea(element) {\r\n    const [row, col] = element.style.gridArea.split(' / ').map(Number);\r\n    return { row, col };\r\n}\r\n\r\n// Select a checker\r\nboard.addEventListener('click', (event) => {\r\n    const target = event.target.closest('.checker');\r\n    if (target && selectedChecker !== target) {\r\n        if (selectedChecker) selectedChecker.classList.remove('selected');\r\n        selectedChecker = target;\r\n        selectedChecker.classList.add('selected');\r\n    } else if (selectedChecker) {\r\n        moveChecker(event);\r\n    }\r\n});\r\n\r\n// Move or jump logic\r\nfunction moveChecker(event) {\r\n    const cell = event.target.closest('.Cell');\r\n    if (!cell || !selectedChecker) return;\r\n\r\n    const { row: startRow, col: startCol } = parseGridArea(selectedChecker);\r\n    const { row: endRow, col: endCol } = parseGridArea(cell);\r\n\r\n    const rowDiff = Math.abs(endRow - startRow);\r\n    const colDiff = Math.abs(endCol - startCol);\r\n\r\n    if (rowDiff === 1 && colDiff === 1) {\r\n        // Simple move\r\n        selectedChecker.style.gridArea = `${endRow} / ${endCol}`;\r\n    } else if (rowDiff === 2 && colDiff === 2) {\r\n        // Jump logic\r\n        const middleRow = (startRow + endRow) / 2;\r\n        const middleCol = (startCol + endCol) / 2;\r\n        const middleCell = [...document.querySelectorAll('.checker')].find(\r\n            checker => {\r\n                const { row, col } = parseGridArea(checker);\r\n                return row === middleRow && col === middleCol && checker !== selectedChecker;\r\n            }\r\n        );\r\n\r\n        if (middleCell && !isSameColor(selectedChecker, middleCell)) {\r\n            // Capture the opponent's checker\r\n            captureChecker(middleCell);\r\n            selectedChecker.style.gridArea = `${endRow} / ${endCol}`;\r\n        }\r\n    }\r\n    selectedChecker.classList.remove('selected');\r\n    selectedChecker = null;\r\n}\r\n\r\n// Check if two checkers are the same color\r\nfunction isSameColor(checker1, checker2) {\r\n    return checker1.classList.contains('black') === checker2.classList.contains('black');\r\n}\r\n\r\n// Capture a checker and move to the cemetery\r\nfunction captureChecker(checker) {\r\n    if (checker.classList.contains('black')) {\r\n        playerCemetery.appendChild(checker);\r\n    } else {\r\n        enemyCemetery.appendChild(checker);\r\n    }\r\n    checker.style.gridArea = ''; // Reset grid-area when moving to cemetery\r\n}\r\n\r\n    console.log(board); // Should not be null\r\n    console.log(playerCemetery); // Should not be null\r\n    console.log(enemyCemetery); // Should not be null\r\n\r\n\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}