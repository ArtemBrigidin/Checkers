{"ast":null,"code":"let selectedChecker = null; // Выбранная шашка\n\ndocument.addEventListener(\"click\", event => {\n  const cell = event.target.closest(\".Cell\");\n  const checker = event.target.closest(\".checker\");\n  if (checker) {\n    console.log(\"Checker selected:\", checker);\n    if (selectedChecker) selectedChecker.classList.remove(\"selected\");\n    selectedChecker = checker;\n    selectedChecker.classList.add(\"selected\");\n  } else if (cell && selectedChecker) {\n    console.log(\"Target cell clicked:\", cell);\n    const currentCell = selectedChecker.closest(\".Cell\");\n    console.log(\"Current cell of checker:\", currentCell);\n    if (isMoveValid(currentCell, cell, selectedChecker)) {\n      console.log(\"Move is valid!\");\n      const jumpedCell = getJumpedCell(currentCell, cell);\n      if (jumpedCell) {\n        const jumpedChecker = jumpedCell.querySelector(\".checker\");\n        if (jumpedChecker) {\n          console.log(\"Removing jumped checker:\", jumpedChecker);\n          jumpedChecker.remove();\n        }\n      }\n      console.log(\"Moving checker to target cell.\");\n      cell.appendChild(selectedChecker);\n      selectedChecker.classList.remove(\"selected\");\n      selectedChecker = null;\n    } else {\n      console.log(\"Move is not valid.\");\n    }\n  } else {\n    console.log(\"No checker or cell interaction detected.\");\n  }\n});\nfunction isMoveValid(currentCell, targetCell, checker) {\n  if (!currentCell || !targetCell) return false;\n  const currentRow = parseInt(currentCell.dataset.row);\n  const currentCol = parseInt(currentCell.dataset.col);\n  const targetRow = parseInt(targetCell.dataset.row);\n  const targetCol = parseInt(targetCell.dataset.col);\n  const rowDiff = Math.abs(targetRow - currentRow);\n  const colDiff = Math.abs(targetCol - currentCol);\n\n  // Проверяем, что целевая клетка пуста\n  if (targetCell.querySelector(\".checker\")) return false;\n\n  // Проверяем обычный ход\n  if (rowDiff === 1 && colDiff === 1) return true;\n\n  // Проверяем прыжок через шашку\n  if (rowDiff === 2 && colDiff === 2) {\n    const jumpedCell = getJumpedCell(currentCell, targetCell);\n    if (jumpedCell && jumpedCell.querySelector(\".checker\")) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction getJumpedCell(currentCell, targetCell) {\n  if (!currentCell || !targetCell) return null;\n  const currentRow = parseInt(currentCell.dataset.row);\n  const currentCol = parseInt(currentCell.dataset.col);\n  const targetRow = parseInt(targetCell.dataset.row);\n  const targetCol = parseInt(targetCell.dataset.col);\n  const jumpedRow = (currentRow + targetRow) / 2;\n  const jumpedCol = (currentCol + targetCol) / 2;\n  return document.querySelector(`.Cell[data-row=\"${jumpedRow}\"][data-col=\"${jumpedCol}\"]`);\n}\n\n// Добавление атрибутов data-row и data-col\ndocument.querySelectorAll('.Cell').forEach((cell, index) => {\n  const row = Math.floor(index / 8) + 1;\n  const col = index % 8 + 1;\n  cell.dataset.row = row;\n  cell.dataset.col = col;\n});","map":{"version":3,"names":["selectedChecker","document","addEventListener","event","cell","target","closest","checker","console","log","classList","remove","add","currentCell","isMoveValid","jumpedCell","getJumpedCell","jumpedChecker","querySelector","appendChild","targetCell","currentRow","parseInt","dataset","row","currentCol","col","targetRow","targetCol","rowDiff","Math","abs","colDiff","jumpedRow","jumpedCol","querySelectorAll","forEach","index","floor"],"sources":["C:/Users/79650/Desktop/lolkekshahmati/src/DOM/Checkers/Game/Board/CheckerMove.js"],"sourcesContent":["let selectedChecker = null; // Выбранная шашка\r\n\r\ndocument.addEventListener(\"click\", (event) => {\r\n    const cell = event.target.closest(\".Cell\");\r\n    const checker = event.target.closest(\".checker\");\r\n\r\n    if (checker) {\r\n        console.log(\"Checker selected:\", checker);\r\n        if (selectedChecker) selectedChecker.classList.remove(\"selected\");\r\n        selectedChecker = checker;\r\n        selectedChecker.classList.add(\"selected\");\r\n    } else if (cell && selectedChecker) {\r\n        console.log(\"Target cell clicked:\", cell);\r\n        const currentCell = selectedChecker.closest(\".Cell\");\r\n        console.log(\"Current cell of checker:\", currentCell);\r\n\r\n        if (isMoveValid(currentCell, cell, selectedChecker)) {\r\n            console.log(\"Move is valid!\");\r\n            const jumpedCell = getJumpedCell(currentCell, cell);\r\n            if (jumpedCell) {\r\n                const jumpedChecker = jumpedCell.querySelector(\".checker\");\r\n                if (jumpedChecker) {\r\n                    console.log(\"Removing jumped checker:\", jumpedChecker);\r\n                    jumpedChecker.remove();\r\n                }\r\n            }\r\n\r\n            console.log(\"Moving checker to target cell.\");\r\n            cell.appendChild(selectedChecker);\r\n            selectedChecker.classList.remove(\"selected\");\r\n            selectedChecker = null;\r\n        } else {\r\n            console.log(\"Move is not valid.\");\r\n        }\r\n    } else {\r\n        console.log(\"No checker or cell interaction detected.\");\r\n    }\r\n});\r\n\r\nfunction isMoveValid(currentCell, targetCell, checker) {\r\n    if (!currentCell || !targetCell) return false;\r\n\r\n    const currentRow = parseInt(currentCell.dataset.row);\r\n    const currentCol = parseInt(currentCell.dataset.col);\r\n    const targetRow = parseInt(targetCell.dataset.row);\r\n    const targetCol = parseInt(targetCell.dataset.col);\r\n\r\n    const rowDiff = Math.abs(targetRow - currentRow);\r\n    const colDiff = Math.abs(targetCol - currentCol);\r\n\r\n    // Проверяем, что целевая клетка пуста\r\n    if (targetCell.querySelector(\".checker\")) return false;\r\n\r\n    // Проверяем обычный ход\r\n    if (rowDiff === 1 && colDiff === 1) return true;\r\n\r\n    // Проверяем прыжок через шашку\r\n    if (rowDiff === 2 && colDiff === 2) {\r\n        const jumpedCell = getJumpedCell(currentCell, targetCell);\r\n        if (jumpedCell && jumpedCell.querySelector(\".checker\")) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction getJumpedCell(currentCell, targetCell) {\r\n    if (!currentCell || !targetCell) return null;\r\n\r\n    const currentRow = parseInt(currentCell.dataset.row);\r\n    const currentCol = parseInt(currentCell.dataset.col);\r\n    const targetRow = parseInt(targetCell.dataset.row);\r\n    const targetCol = parseInt(targetCell.dataset.col);\r\n\r\n    const jumpedRow = (currentRow + targetRow) / 2;\r\n    const jumpedCol = (currentCol + targetCol) / 2;\r\n\r\n    return document.querySelector(\r\n        `.Cell[data-row=\"${jumpedRow}\"][data-col=\"${jumpedCol}\"]`\r\n    );\r\n}\r\n\r\n// Добавление атрибутов data-row и data-col\r\ndocument.querySelectorAll('.Cell').forEach((cell, index) => {\r\n    const row = Math.floor(index / 8) + 1;\r\n    const col = (index % 8) + 1;\r\n    cell.dataset.row = row;\r\n    cell.dataset.col = col;\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}