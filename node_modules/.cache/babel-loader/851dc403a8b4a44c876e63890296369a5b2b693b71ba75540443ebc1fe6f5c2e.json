{"ast":null,"code":"document.addEventListener('DOMContentLoaded', () => {\n  console.log('DOM полностью загружен');\n  const board = document.querySelector('.Board');\n  const playerCemetery = document.getElementById('PlayerCemetry');\n  const enemyCemetery = document.getElementById('EnemyCemetry');\n  console.log('Board:', board);\n  console.log('Player Cemetery:', playerCemetery);\n  console.log('Enemy Cemetery:', enemyCemetery);\n});\n\n// Helper to parse grid-area style (returns {row, col})\nfunction parseGridArea(element) {\n  const [row, col] = element.style.gridArea.split(' / ').map(Number);\n  return {\n    row,\n    col\n  };\n}\n\n// Select a checker\nboard.addEventListener('click', event => {\n  const target = event.target.closest('.checker');\n  if (target && selectedChecker !== target) {\n    if (selectedChecker) selectedChecker.classList.remove('selected');\n    selectedChecker = target;\n    selectedChecker.classList.add('selected');\n  } else if (selectedChecker) {\n    moveChecker(event);\n  }\n});\n\n// Move or jump logic\nfunction moveChecker(event) {\n  const cell = event.target.closest('.Cell');\n  if (!cell || !selectedChecker) return;\n  const {\n    row: startRow,\n    col: startCol\n  } = parseGridArea(selectedChecker);\n  const {\n    row,\n    col\n  } = parseGridArea(cell);\n  const rowDiff = Math.abs(row - startRow);\n  const colDiff = Math.abs(col - startCol);\n  if (rowDiff === 1 && colDiff === 1) {\n    selectedChecker.style.gridArea = `${row} / ${col}`;\n  } else if (rowDiff === 2 && colDiff === 2) {\n    const middleRow = (startRow + row) / 2;\n    const middleCol = (startCol + col) / 2;\n    const middleChecker = [...document.querySelectorAll('.checker')].find(checker => {\n      const {\n        row,\n        col\n      } = parseGridArea(checker);\n      return row === middleRow && col === middleCol && checker !== selectedChecker;\n    });\n    if (middleChecker && !isSameColor(selectedChecker, middleChecker)) {\n      captureChecker(middleChecker);\n      selectedChecker.style.gridArea = `${row} / ${col}`;\n    }\n  }\n  selectedChecker.classList.remove('selected');\n  selectedChecker = null;\n}\n\n// Check if two checkers are the same color\nfunction isSameColor(checker1, checker2) {\n  return checker1.classList.contains('black') === checker2.classList.contains('black');\n}\n\n// Capture a checker and move to the cemetery\nfunction captureChecker(checker) {\n  if (checker.classList.contains('black')) {\n    playerCemetery.appendChild(checker);\n  } else {\n    enemyCemetery.appendChild(checker);\n  }\n  checker.style.gridArea = ''; // Reset grid-area when moving to cemetery\n}","map":{"version":3,"names":["document","addEventListener","console","log","board","querySelector","playerCemetery","getElementById","enemyCemetery","parseGridArea","element","row","col","style","gridArea","split","map","Number","event","target","closest","selectedChecker","classList","remove","add","moveChecker","cell","startRow","startCol","rowDiff","Math","abs","colDiff","middleRow","middleCol","middleChecker","querySelectorAll","find","checker","isSameColor","captureChecker","checker1","checker2","contains","appendChild"],"sources":["C:/Users/79650/Desktop/lolkekshahmati/src/DOM/Checkers/Game/Board/CheckerMove.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    console.log('DOM полностью загружен');\r\n    const board = document.querySelector('.Board');\r\n    const playerCemetery = document.getElementById('PlayerCemetry');\r\n    const enemyCemetery = document.getElementById('EnemyCemetry');\r\n\r\n    console.log('Board:', board);\r\n    console.log('Player Cemetery:', playerCemetery);\r\n    console.log('Enemy Cemetery:', enemyCemetery);\r\n});\r\n\r\n\r\n// Helper to parse grid-area style (returns {row, col})\r\n    function parseGridArea(element) {\r\n        const [row, col] = element.style.gridArea.split(' / ').map(Number);\r\n        return { row, col };\r\n    }\r\n\r\n    // Select a checker\r\n    board.addEventListener('click', (event) => {\r\n        const target = event.target.closest('.checker');\r\n        if (target && selectedChecker !== target) {\r\n            if (selectedChecker) selectedChecker.classList.remove('selected');\r\n            selectedChecker = target;\r\n            selectedChecker.classList.add('selected');\r\n        } else if (selectedChecker) {\r\n            moveChecker(event);\r\n        }\r\n    });\r\n\r\n    // Move or jump logic\r\n    function moveChecker(event) {\r\n        const cell = event.target.closest('.Cell');\r\n        if (!cell || !selectedChecker) return;\r\n\r\n        const { row: startRow, col: startCol } = parseGridArea(selectedChecker);\r\n        const { row, col } = parseGridArea(cell);\r\n\r\n        const rowDiff = Math.abs(row - startRow);\r\n        const colDiff = Math.abs(col - startCol);\r\n\r\n        if (rowDiff === 1 && colDiff === 1) {\r\n            selectedChecker.style.gridArea = `${row} / ${col}`;\r\n        } else if (rowDiff === 2 && colDiff === 2) {\r\n            const middleRow = (startRow + row) / 2;\r\n            const middleCol = (startCol + col) / 2;\r\n            const middleChecker = [...document.querySelectorAll('.checker')].find((checker) => {\r\n                const { row, col } = parseGridArea(checker);\r\n                return row === middleRow && col === middleCol && checker !== selectedChecker;\r\n            });\r\n\r\n            if (middleChecker && !isSameColor(selectedChecker, middleChecker)) {\r\n                captureChecker(middleChecker);\r\n                selectedChecker.style.gridArea = `${row} / ${col}`;\r\n            }\r\n        }\r\n        selectedChecker.classList.remove('selected');\r\n        selectedChecker = null;\r\n    }\r\n\r\n    // Check if two checkers are the same color\r\n    function isSameColor(checker1, checker2) {\r\n        return checker1.classList.contains('black') === checker2.classList.contains('black');\r\n    }\r\n\r\n    // Capture a checker and move to the cemetery\r\n    function captureChecker(checker) {\r\n        if (checker.classList.contains('black')) {\r\n            playerCemetery.appendChild(checker);\r\n        } else {\r\n            enemyCemetery.appendChild(checker);\r\n        }\r\n        checker.style.gridArea = ''; // Reset grid-area when moving to cemetery\r\n    }\r\n"],"mappings":"AAAAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;EAChDC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACrC,MAAMC,KAAK,GAAGJ,QAAQ,CAACK,aAAa,CAAC,QAAQ,CAAC;EAC9C,MAAMC,cAAc,GAAGN,QAAQ,CAACO,cAAc,CAAC,eAAe,CAAC;EAC/D,MAAMC,aAAa,GAAGR,QAAQ,CAACO,cAAc,CAAC,cAAc,CAAC;EAE7DL,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEC,KAAK,CAAC;EAC5BF,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEG,cAAc,CAAC;EAC/CJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEK,aAAa,CAAC;AACjD,CAAC,CAAC;;AAGF;AACI,SAASC,aAAaA,CAACC,OAAO,EAAE;EAC5B,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGF,OAAO,CAACG,KAAK,CAACC,QAAQ,CAACC,KAAK,CAAC,KAAK,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;EAClE,OAAO;IAAEN,GAAG;IAAEC;EAAI,CAAC;AACvB;;AAEA;AACAR,KAAK,CAACH,gBAAgB,CAAC,OAAO,EAAGiB,KAAK,IAAK;EACvC,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC,UAAU,CAAC;EAC/C,IAAID,MAAM,IAAIE,eAAe,KAAKF,MAAM,EAAE;IACtC,IAAIE,eAAe,EAAEA,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,UAAU,CAAC;IACjEF,eAAe,GAAGF,MAAM;IACxBE,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,UAAU,CAAC;EAC7C,CAAC,MAAM,IAAIH,eAAe,EAAE;IACxBI,WAAW,CAACP,KAAK,CAAC;EACtB;AACJ,CAAC,CAAC;;AAEF;AACA,SAASO,WAAWA,CAACP,KAAK,EAAE;EACxB,MAAMQ,IAAI,GAAGR,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC;EAC1C,IAAI,CAACM,IAAI,IAAI,CAACL,eAAe,EAAE;EAE/B,MAAM;IAAEV,GAAG,EAAEgB,QAAQ;IAAEf,GAAG,EAAEgB;EAAS,CAAC,GAAGnB,aAAa,CAACY,eAAe,CAAC;EACvE,MAAM;IAAEV,GAAG;IAAEC;EAAI,CAAC,GAAGH,aAAa,CAACiB,IAAI,CAAC;EAExC,MAAMG,OAAO,GAAGC,IAAI,CAACC,GAAG,CAACpB,GAAG,GAAGgB,QAAQ,CAAC;EACxC,MAAMK,OAAO,GAAGF,IAAI,CAACC,GAAG,CAACnB,GAAG,GAAGgB,QAAQ,CAAC;EAExC,IAAIC,OAAO,KAAK,CAAC,IAAIG,OAAO,KAAK,CAAC,EAAE;IAChCX,eAAe,CAACR,KAAK,CAACC,QAAQ,GAAG,GAAGH,GAAG,MAAMC,GAAG,EAAE;EACtD,CAAC,MAAM,IAAIiB,OAAO,KAAK,CAAC,IAAIG,OAAO,KAAK,CAAC,EAAE;IACvC,MAAMC,SAAS,GAAG,CAACN,QAAQ,GAAGhB,GAAG,IAAI,CAAC;IACtC,MAAMuB,SAAS,GAAG,CAACN,QAAQ,GAAGhB,GAAG,IAAI,CAAC;IACtC,MAAMuB,aAAa,GAAG,CAAC,GAAGnC,QAAQ,CAACoC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAACC,IAAI,CAAEC,OAAO,IAAK;MAC/E,MAAM;QAAE3B,GAAG;QAAEC;MAAI,CAAC,GAAGH,aAAa,CAAC6B,OAAO,CAAC;MAC3C,OAAO3B,GAAG,KAAKsB,SAAS,IAAIrB,GAAG,KAAKsB,SAAS,IAAII,OAAO,KAAKjB,eAAe;IAChF,CAAC,CAAC;IAEF,IAAIc,aAAa,IAAI,CAACI,WAAW,CAAClB,eAAe,EAAEc,aAAa,CAAC,EAAE;MAC/DK,cAAc,CAACL,aAAa,CAAC;MAC7Bd,eAAe,CAACR,KAAK,CAACC,QAAQ,GAAG,GAAGH,GAAG,MAAMC,GAAG,EAAE;IACtD;EACJ;EACAS,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,UAAU,CAAC;EAC5CF,eAAe,GAAG,IAAI;AAC1B;;AAEA;AACA,SAASkB,WAAWA,CAACE,QAAQ,EAAEC,QAAQ,EAAE;EACrC,OAAOD,QAAQ,CAACnB,SAAS,CAACqB,QAAQ,CAAC,OAAO,CAAC,KAAKD,QAAQ,CAACpB,SAAS,CAACqB,QAAQ,CAAC,OAAO,CAAC;AACxF;;AAEA;AACA,SAASH,cAAcA,CAACF,OAAO,EAAE;EAC7B,IAAIA,OAAO,CAAChB,SAAS,CAACqB,QAAQ,CAAC,OAAO,CAAC,EAAE;IACrCrC,cAAc,CAACsC,WAAW,CAACN,OAAO,CAAC;EACvC,CAAC,MAAM;IACH9B,aAAa,CAACoC,WAAW,CAACN,OAAO,CAAC;EACtC;EACAA,OAAO,CAACzB,KAAK,CAACC,QAAQ,GAAG,EAAE,CAAC,CAAC;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}