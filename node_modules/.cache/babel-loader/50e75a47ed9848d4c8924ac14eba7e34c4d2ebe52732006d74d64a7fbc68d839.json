{"ast":null,"code":"document.addEventListener('DOMContentLoaded', () => {\n  console.log('DOM полностью загружен');\n  const board = document.querySelector('.Board');\n  const playerCemetery = document.getElementById('PlayerCemetry');\n  const enemyCemetery = document.getElementById('EnemyCemetry');\n  let selectedChecker = null;\n  console.log('Board:', board);\n  console.log('Player Cemetery:', playerCemetery);\n  console.log('Enemy Cemetery:', enemyCemetery);\n  board.addEventListener('click', event => {\n    const target = event.target.closest('.checker');\n    if (target) {\n      if (selectedChecker) selectedChecker.classList.remove('selected');\n      selectedChecker = target !== selectedChecker ? target : null;\n      if (selectedChecker) selectedChecker.classList.add('selected');\n    } else if (selectedChecker) {\n      moveChecker(event.target.closest('.Cell'));\n    }\n  });\n  function moveChecker(cell) {\n    var _selectedChecker;\n    if (!cell) return;\n    const [startRow, startCol] = getGridArea(selectedChecker);\n    const [endRow, endCol] = getGridArea(cell);\n    const rowDiff = Math.abs(endRow - startRow);\n    const colDiff = Math.abs(endCol - startCol);\n    if (rowDiff === 1 && colDiff === 1) {\n      updateCheckerPosition(endRow, endCol);\n    } else if (rowDiff === 2 && colDiff === 2) {\n      const middleChecker = getMiddleChecker(startRow, startCol, endRow, endCol);\n      if (middleChecker && !isSameColor(selectedChecker, middleChecker)) {\n        captureChecker(middleChecker);\n        updateCheckerPosition(endRow, endCol);\n      }\n    }\n    (_selectedChecker = selectedChecker) === null || _selectedChecker === void 0 ? void 0 : _selectedChecker.classList.remove('selected');\n    selectedChecker = null;\n  }\n  function getGridArea(element) {\n    return element.style.gridArea.split(' / ').map(Number);\n  }\n  function updateCheckerPosition(row, col) {\n    selectedChecker.style.gridArea = `${row} / ${col}`;\n  }\n  function getMiddleChecker(startRow, startCol, endRow, endCol) {\n    const midRow = (startRow + endRow) / 2;\n    const midCol = (startCol + endCol) / 2;\n    return [...document.querySelectorAll('.checker')].find(checker => {\n      const [row, col] = getGridArea(checker);\n      return row === midRow && col === midCol;\n    });\n  }\n  function isSameColor(checker1, checker2) {\n    return checker1.classList.contains('black') === checker2.classList.contains('black');\n  }\n  function captureChecker(checker) {\n    const cemetery = checker.classList.contains('black') ? playerCemetery : enemyCemetery;\n    cemetery.appendChild(checker);\n    checker.style.gridArea = '';\n  }\n});","map":{"version":3,"names":["document","addEventListener","console","log","board","querySelector","playerCemetery","getElementById","enemyCemetery","selectedChecker","event","target","closest","classList","remove","add","moveChecker","cell","_selectedChecker","startRow","startCol","getGridArea","endRow","endCol","rowDiff","Math","abs","colDiff","updateCheckerPosition","middleChecker","getMiddleChecker","isSameColor","captureChecker","element","style","gridArea","split","map","Number","row","col","midRow","midCol","querySelectorAll","find","checker","checker1","checker2","contains","cemetery","appendChild"],"sources":["C:/Users/79650/Desktop/lolkekshahmati/src/DOM/Checkers/Game/Board/CheckerMove.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    console.log('DOM полностью загружен');\r\n\r\n    const board = document.querySelector('.Board');\r\n    const playerCemetery = document.getElementById('PlayerCemetry');\r\n    const enemyCemetery = document.getElementById('EnemyCemetry');\r\n    let selectedChecker = null;\r\n\r\n    console.log('Board:', board);\r\n    console.log('Player Cemetery:', playerCemetery);\r\n    console.log('Enemy Cemetery:', enemyCemetery);\r\n\r\n    board.addEventListener('click', (event) => {\r\n        const target = event.target.closest('.checker');\r\n        if (target) {\r\n            if (selectedChecker) selectedChecker.classList.remove('selected');\r\n            selectedChecker = target !== selectedChecker ? target : null;\r\n            if (selectedChecker) selectedChecker.classList.add('selected');\r\n        } else if (selectedChecker) {\r\n            moveChecker(event.target.closest('.Cell'));\r\n        }\r\n    });\r\n\r\n    function moveChecker(cell) {\r\n        if (!cell) return;\r\n\r\n        const [startRow, startCol] = getGridArea(selectedChecker);\r\n        const [endRow, endCol] = getGridArea(cell);\r\n        const rowDiff = Math.abs(endRow - startRow);\r\n        const colDiff = Math.abs(endCol - startCol);\r\n\r\n        if (rowDiff === 1 && colDiff === 1) {\r\n            updateCheckerPosition(endRow, endCol);\r\n        } else if (rowDiff === 2 && colDiff === 2) {\r\n            const middleChecker = getMiddleChecker(startRow, startCol, endRow, endCol);\r\n            if (middleChecker && !isSameColor(selectedChecker, middleChecker)) {\r\n                captureChecker(middleChecker);\r\n                updateCheckerPosition(endRow, endCol);\r\n            }\r\n        }\r\n        selectedChecker?.classList.remove('selected');\r\n        selectedChecker = null;\r\n    }\r\n\r\n    function getGridArea(element) {\r\n        return element.style.gridArea.split(' / ').map(Number);\r\n    }\r\n\r\n    function updateCheckerPosition(row, col) {\r\n        selectedChecker.style.gridArea = `${row} / ${col}`;\r\n    }\r\n\r\n    function getMiddleChecker(startRow, startCol, endRow, endCol) {\r\n        const midRow = (startRow + endRow) / 2;\r\n        const midCol = (startCol + endCol) / 2;\r\n        return [...document.querySelectorAll('.checker')].find(checker => {\r\n            const [row, col] = getGridArea(checker);\r\n            return row === midRow && col === midCol;\r\n        });\r\n    }\r\n\r\n    function isSameColor(checker1, checker2) {\r\n        return checker1.classList.contains('black') === checker2.classList.contains('black');\r\n    }\r\n\r\n    function captureChecker(checker) {\r\n        const cemetery = checker.classList.contains('black') ? playerCemetery : enemyCemetery;\r\n        cemetery.appendChild(checker);\r\n        checker.style.gridArea = '';\r\n    }\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}