{"ast":null,"code":"document.addEventListener('DOMContentLoaded', () => {\n  const board = document.querySelector('.Board');\n  if (board) {\n    board.addEventListener('click', event => {\n      console.log('Клик на доске!'); // Проверим, что событие клика сработало\n      const element = closestPolyfill(event.target, 'div'); // Поиск ближайшего div\n      if (element) {\n        console.log('Найден ближайший элемент!');\n        const computedStyle = window.getComputedStyle(element); // Получаем стили элемента\n        const gridArea = computedStyle.gridArea || 'none';\n        const rowStart = computedStyle.gridRowStart || 'auto';\n        const columnStart = computedStyle.gridColumnStart || 'auto';\n        if (gridArea !== 'none') {\n          console.log(`Grid Area: ${gridArea}`); // Логируем gridArea\n        }\n        if (rowStart !== 'auto' && columnStart !== 'auto') {\n          console.log(`Row: ${rowStart}, Column: ${columnStart}`); // Логируем начальную строку и столбец\n        }\n      } else {\n        console.log('Не найден ближайший элемент div');\n      }\n    });\n  } else {\n    console.log('Элемент .Board не найден.');\n  }\n});\nfunction closestPolyfill(el, selector) {\n  console.log('Пытаемся найти ближайший элемент...');\n  while (el) {\n    if (el.matches(selector)) return el;\n    el = el.parentElement;\n  }\n  return null;\n}\n\n// Полифилл для closest\nif (!Element.prototype.closest) {\n  Element.prototype.closest = function (selector) {\n    let el = this;\n    while (el) {\n      if (el.matches(selector)) return el;\n      el = el.parentElement;\n    }\n    return null;\n  };\n}\n\n// Обработчик клика на .Board\nconst board = document.querySelector('.Board');\nif (board) {\n  board.addEventListener('click', event => {\n    const element = closestPolyfill(event.target, 'div'); // Поиск ближайшего div\n\n    if (element) {\n      const computedStyle = window.getComputedStyle(element); // Получаем стили элемента\n\n      // Проверка наличия gridArea\n      const gridArea = computedStyle.gridArea || 'none';\n      const rowStart = computedStyle.gridRowStart || 'auto';\n      const columnStart = computedStyle.gridColumnStart || 'auto';\n      if (gridArea !== 'none') {\n        console.log(`Grid Area: ${gridArea}`); // Логируем gridArea\n      }\n      if (rowStart !== 'auto' && columnStart !== 'auto') {\n        console.log(`Row: ${rowStart}, Column: ${columnStart}`); // Логируем начальную строку и столбец\n      }\n    }\n  });\n}","map":{"version":3,"names":["document","addEventListener","board","querySelector","event","console","log","element","closestPolyfill","target","computedStyle","window","getComputedStyle","gridArea","rowStart","gridRowStart","columnStart","gridColumnStart","el","selector","matches","parentElement","Element","prototype","closest"],"sources":["C:/Users/79650/Desktop/lolkekshahmati/src/DOM/Checkers/Game/Board/CheckerMove.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    const board = document.querySelector('.Board');\r\n    if (board) {\r\n        board.addEventListener('click', (event) => {\r\n            console.log('Клик на доске!'); // Проверим, что событие клика сработало\r\n            const element = closestPolyfill(event.target, 'div'); // Поиск ближайшего div\r\n            if (element) {\r\n                console.log('Найден ближайший элемент!');\r\n                const computedStyle = window.getComputedStyle(element); // Получаем стили элемента\r\n                const gridArea = computedStyle.gridArea || 'none';\r\n                const rowStart = computedStyle.gridRowStart || 'auto';\r\n                const columnStart = computedStyle.gridColumnStart || 'auto';\r\n\r\n                if (gridArea !== 'none') {\r\n                    console.log(`Grid Area: ${gridArea}`); // Логируем gridArea\r\n                }\r\n\r\n                if (rowStart !== 'auto' && columnStart !== 'auto') {\r\n                    console.log(`Row: ${rowStart}, Column: ${columnStart}`); // Логируем начальную строку и столбец\r\n                }\r\n            } else {\r\n                console.log('Не найден ближайший элемент div');\r\n            }\r\n        });\r\n    } else {\r\n        console.log('Элемент .Board не найден.');\r\n    }\r\n});\r\n\r\n\r\nfunction closestPolyfill(el, selector) {\r\n    console.log('Пытаемся найти ближайший элемент...');\r\n    while (el) {\r\n        if (el.matches(selector)) return el;\r\n        el = el.parentElement;\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n// Полифилл для closest\r\nif (!Element.prototype.closest) {\r\n    Element.prototype.closest = function(selector) {\r\n        let el = this;\r\n        while (el) {\r\n            if (el.matches(selector)) return el;\r\n            el = el.parentElement;\r\n        }\r\n        return null;\r\n    };\r\n}\r\n\r\n// Обработчик клика на .Board\r\nconst board = document.querySelector('.Board');\r\nif (board) {\r\n    board.addEventListener('click', (event) => {\r\n        const element = closestPolyfill(event.target, 'div'); // Поиск ближайшего div\r\n\r\n        if (element) {\r\n            const computedStyle = window.getComputedStyle(element); // Получаем стили элемента\r\n\r\n            // Проверка наличия gridArea\r\n            const gridArea = computedStyle.gridArea || 'none';\r\n            const rowStart = computedStyle.gridRowStart || 'auto';\r\n            const columnStart = computedStyle.gridColumnStart || 'auto';\r\n\r\n            if (gridArea !== 'none') {\r\n                console.log(`Grid Area: ${gridArea}`); // Логируем gridArea\r\n            }\r\n\r\n            if (rowStart !== 'auto' && columnStart !== 'auto') {\r\n                console.log(`Row: ${rowStart}, Column: ${columnStart}`); // Логируем начальную строку и столбец\r\n            }\r\n        }\r\n    });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}