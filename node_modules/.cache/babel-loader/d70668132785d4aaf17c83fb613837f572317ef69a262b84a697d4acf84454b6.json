{"ast":null,"code":"document.addEventListener('DOMContentLoaded', () => {\n  console.log('DOM полностью загружен');\n\n  // Получаем элементы\n  const board = document.querySelector('.Board'); // Используем .Board для поиска\n  const playerCemetery = document.getElementById('PlayerCemetry');\n  const enemyCemetery = document.getElementById('EnemyCemetry');\n  let selectedChecker = null;\n  console.log('Board:', board); // Для отладки\n  console.log('Player Cemetery:', playerCemetery);\n  console.log('Enemy Cemetery:', enemyCemetery);\n  if (board) {\n    board.addEventListener('click', event => {\n      const target = event.target.closest('.checker');\n      if (target) {\n        if (selectedChecker) selectedChecker.classList.remove('selected');\n        selectedChecker = target !== selectedChecker ? target : null;\n        if (selectedChecker) selectedChecker.classList.add('selected');\n      } else if (selectedChecker) {\n        moveChecker(event.target.closest('.Cell'));\n      }\n    });\n  } else {\n    console.error('Board not found in the document.');\n  }\n  function moveChecker(cell) {\n    if (!cell) return;\n    const [startRow, startCol] = getGridArea(selectedChecker);\n    const [endRow, endCol] = getGridArea(cell);\n    const rowDiff = Math.abs(endRow - startRow);\n    const colDiff = Math.abs(endCol - startCol);\n    if (rowDiff === 1 && colDiff === 1) {\n      updateCheckerPosition(endRow, endCol);\n    } else if (rowDiff === 2 && colDiff === 2) {\n      const middleChecker = getMiddleChecker(startRow, startCol, endRow, endCol);\n      if (middleChecker) {\n        captureChecker(middleChecker);\n        updateCheckerPosition(endRow, endCol);\n      }\n    }\n  }\n  function getGridArea(element) {\n    const [row, col] = element.style.gridArea.split(' / ').map(Number);\n    return [row, col];\n  }\n  function updateCheckerPosition(row, col) {\n    selectedChecker.style.gridArea = `${row} / ${col}`;\n    selectedChecker.classList.remove('selected');\n    selectedChecker = null;\n  }\n  function getMiddleChecker(startRow, startCol, endRow, endCol) {\n    const middleRow = (startRow + endRow) / 2;\n    const middleCol = (startCol + endCol) / 2;\n    return [...document.querySelectorAll('.checker')].find(checker => {\n      const [row, col] = getGridArea(checker);\n      return row === middleRow && col === middleCol && checker !== selectedChecker;\n    });\n  }\n  function captureChecker(checker) {\n    if (checker.classList.contains('black')) {\n      playerCemetery.appendChild(checker);\n    } else {\n      enemyCemetery.appendChild(checker);\n    }\n  }\n});","map":{"version":3,"names":["document","addEventListener","console","log","board","querySelector","playerCemetery","getElementById","enemyCemetery","selectedChecker","event","target","closest","classList","remove","add","moveChecker","error","cell","startRow","startCol","getGridArea","endRow","endCol","rowDiff","Math","abs","colDiff","updateCheckerPosition","middleChecker","getMiddleChecker","captureChecker","element","row","col","style","gridArea","split","map","Number","middleRow","middleCol","querySelectorAll","find","checker","contains","appendChild"],"sources":["C:/Users/79650/Desktop/lolkekshahmati/src/DOM/Checkers/Game/Board/CheckerMove.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    console.log('DOM полностью загружен');\r\n\r\n    // Получаем элементы\r\n    const board = document.querySelector('.Board'); // Используем .Board для поиска\r\n    const playerCemetery = document.getElementById('PlayerCemetry');\r\n    const enemyCemetery = document.getElementById('EnemyCemetry');\r\n    let selectedChecker = null;\r\n\r\n    console.log('Board:', board);  // Для отладки\r\n    console.log('Player Cemetery:', playerCemetery);\r\n    console.log('Enemy Cemetery:', enemyCemetery);\r\n\r\n    if (board) {\r\n        board.addEventListener('click', (event) => {\r\n            const target = event.target.closest('.checker');\r\n            if (target) {\r\n                if (selectedChecker) selectedChecker.classList.remove('selected');\r\n                selectedChecker = target !== selectedChecker ? target : null;\r\n                if (selectedChecker) selectedChecker.classList.add('selected');\r\n            } else if (selectedChecker) {\r\n                moveChecker(event.target.closest('.Cell'));\r\n            }\r\n        });\r\n    } else {\r\n        console.error('Board not found in the document.');\r\n    }\r\n\r\n    function moveChecker(cell) {\r\n        if (!cell) return;\r\n\r\n        const [startRow, startCol] = getGridArea(selectedChecker);\r\n        const [endRow, endCol] = getGridArea(cell);\r\n        const rowDiff = Math.abs(endRow - startRow);\r\n        const colDiff = Math.abs(endCol - startCol);\r\n\r\n        if (rowDiff === 1 && colDiff === 1) {\r\n            updateCheckerPosition(endRow, endCol);\r\n        } else if (rowDiff === 2 && colDiff === 2) {\r\n            const middleChecker = getMiddleChecker(startRow, startCol, endRow, endCol);\r\n            if (middleChecker) {\r\n                captureChecker(middleChecker);\r\n                updateCheckerPosition(endRow, endCol);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getGridArea(element) {\r\n        const [row, col] = element.style.gridArea.split(' / ').map(Number);\r\n        return [row, col];\r\n    }\r\n\r\n    function updateCheckerPosition(row, col) {\r\n        selectedChecker.style.gridArea = `${row} / ${col}`;\r\n        selectedChecker.classList.remove('selected');\r\n        selectedChecker = null;\r\n    }\r\n\r\n    function getMiddleChecker(startRow, startCol, endRow, endCol) {\r\n        const middleRow = (startRow + endRow) / 2;\r\n        const middleCol = (startCol + endCol) / 2;\r\n        return [...document.querySelectorAll('.checker')].find(checker => {\r\n            const [row, col] = getGridArea(checker);\r\n            return row === middleRow && col === middleCol && checker !== selectedChecker;\r\n        });\r\n    }\r\n\r\n    function captureChecker(checker) {\r\n        if (checker.classList.contains('black')) {\r\n            playerCemetery.appendChild(checker);\r\n        } else {\r\n            enemyCemetery.appendChild(checker);\r\n        }\r\n    }\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}