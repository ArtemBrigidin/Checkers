{"ast":null,"code":"// Переменная для выбранной шашки\nlet selectedChecker = null;\ndocument.addEventListener(\"click\", event => {\n  // Получаем клетку, по которой был клик\n  const cell = event.target.closest(\".Cell\"); // Убедитесь, что .Cell правильно соответствует клетке\n  const checker = event.target.closest(\".checker\"); // Убедитесь, что .checker правильно соответствует шашке\n\n  if (checker) {\n    // Выделяем шашку\n    if (selectedChecker) selectedChecker.classList.remove(\"selected\");\n    selectedChecker = checker;\n    selectedChecker.classList.add(\"selected\");\n    console.log(\"Checker selected:\", selectedChecker);\n  } else if (cell && selectedChecker) {\n    const currentCell = selectedChecker.closest(\".Cell\");\n    const targetCell = cell;\n    console.log(\"currentCell:\", currentCell);\n    console.log(\"targetCell:\", targetCell);\n    if (!currentCell) {\n      console.error(\"currentCell is null\");\n      return;\n    }\n\n    // Проверяем, можно ли переместить шашку\n    if (isMoveValid(currentCell, targetCell, selectedChecker)) {\n      console.log(\"Move is valid\");\n\n      // Если прыжок через шашку — удаляем её\n      const jumpedCell = getJumpedCell(currentCell, targetCell);\n      if (jumpedCell) {\n        const jumpedChecker = jumpedCell.querySelector(\".checker\");\n        if (jumpedChecker) {\n          console.log(\"Jumped Checker Removed\");\n          jumpedChecker.remove();\n        }\n      }\n\n      // Перемещаем шашку\n      targetCell.appendChild(selectedChecker);\n      selectedChecker.classList.remove(\"selected\");\n      selectedChecker = null;\n      console.log(\"Checker moved\");\n    } else {\n      console.log(\"Move is invalid\");\n    }\n  }\n});\nfunction isMoveValid(currentCell, targetCell, checker) {\n  console.log(\"Validating move...\");\n\n  // Проверяем, что currentCell и targetCell существуют\n  if (!currentCell || !targetCell) {\n    console.log(\"currentCell or targetCell is null\");\n    return false;\n  }\n  const currentGridArea = window.getComputedStyle(currentCell).gridArea;\n  const targetGridArea = window.getComputedStyle(targetCell).gridArea;\n  const [currentRow, currentCol] = parseGridArea(currentGridArea);\n  const [targetRow, targetCol] = parseGridArea(targetGridArea);\n  const rowDiff = Math.abs(targetRow - currentRow);\n  const colDiff = Math.abs(targetCol - currentCol);\n\n  // Проверяем, что целевая клетка пуста\n  if (!targetCell.querySelector(\".checker\")) {\n    // Проверяем обычный ход\n    if (rowDiff === 1 && colDiff === 1) {\n      const jumpedCell = getJumpedCell(currentCell, targetCell);\n      if (jumpedCell) {\n        console.log(\"Jumped Cell Found:\", jumpedCell);\n        const jumpedChecker = jumpedCell.querySelector(\".checker\");\n        if (jumpedChecker) {\n          console.log(\"Jumped Checker Removed\");\n          jumpedChecker.remove();\n        }\n      }\n      return true;\n    }\n\n    // Проверяем прыжок через шашку\n    if (rowDiff === 2 && colDiff === 2) {\n      console.log(\"Checking for jump...\");\n      const jumpedCell = getJumpedCell(currentCell, targetCell);\n      if (jumpedCell) {\n        console.log(\"Jumped Cell Found:\", jumpedCell);\n        const jumpedChecker = jumpedCell.querySelector(\".checker\");\n        if (jumpedChecker) {\n          console.log(\"Jumped Checker Removed\");\n          jumpedChecker.remove();\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction getJumpedCell(currentCell, targetCell) {\n  console.log(\"getJumpedCell called\");\n\n  // Проверяем, что currentCell и targetCell существуют\n  if (!currentCell || !targetCell) {\n    console.log(\"currentCell or targetCell is null in getJumpedCell\");\n    return null;\n  }\n  const currentGridArea = window.getComputedStyle(currentCell).gridArea;\n  const targetGridArea = window.getComputedStyle(targetCell).gridArea;\n  const [currentRow, currentCol] = parseGridArea(currentGridArea);\n  const [targetRow, targetCol] = parseGridArea(targetGridArea);\n  console.log(`currentRow: ${currentRow}, currentCol: ${currentCol}`);\n  console.log(`targetRow: ${targetRow}, targetCol: ${targetCol}`);\n\n  // Вычисляем промежуточные координаты\n  const jumpedRow = Math.round((currentRow + targetRow) / 2);\n  const jumpedCol = Math.round((currentCol + targetCol) / 2);\n  console.log(`jumpedRow: ${jumpedRow}, jumpedCol: ${jumpedCol}`);\n\n  // Находим промежуточную ячейку с помощью grid-area\n  return findCellByGridArea(jumpedRow, jumpedCol);\n}\nfunction parseGridArea(gridArea) {\n  const parts = gridArea.split(\" / \").map(part => parseInt(part.trim(), 10));\n  return [parts[0], parts[1]]; // row-start и col-start\n}\nfunction findCellByGridArea(row, col) {\n  console.log(`Searching for cell at row=${row}, col=${col}`);\n  return Array.from(document.querySelectorAll(\".Cell\")).find(cell => {\n    const gridArea = window.getComputedStyle(cell).gridArea;\n    const [cellRow, cellCol] = parseGridArea(gridArea);\n    console.log(`Checking cell with gridArea: row=${cellRow}, col=${cellCol}`);\n    return cellRow === row && cellCol === col;\n  });\n}","map":{"version":3,"names":["selectedChecker","document","addEventListener","event","cell","target","closest","checker","classList","remove","add","console","log","currentCell","targetCell","error","isMoveValid","jumpedCell","getJumpedCell","jumpedChecker","querySelector","appendChild","currentGridArea","window","getComputedStyle","gridArea","targetGridArea","currentRow","currentCol","parseGridArea","targetRow","targetCol","rowDiff","Math","abs","colDiff","jumpedRow","round","jumpedCol","findCellByGridArea","parts","split","map","part","parseInt","trim","row","col","Array","from","querySelectorAll","find","cellRow","cellCol"],"sources":["C:/Users/79650/Desktop/lolkekshahmati/src/DOM/Checkers/Game/Board/CheckerMove.js"],"sourcesContent":["// Переменная для выбранной шашки\r\nlet selectedChecker = null;\r\n\r\ndocument.addEventListener(\"click\", (event) => {\r\n    // Получаем клетку, по которой был клик\r\n    const cell = event.target.closest(\".Cell\"); // Убедитесь, что .Cell правильно соответствует клетке\r\n    const checker = event.target.closest(\".checker\"); // Убедитесь, что .checker правильно соответствует шашке\r\n\r\n    if (checker) {\r\n        // Выделяем шашку\r\n        if (selectedChecker) selectedChecker.classList.remove(\"selected\");\r\n        selectedChecker = checker;\r\n        selectedChecker.classList.add(\"selected\");\r\n        console.log(\"Checker selected:\", selectedChecker);\r\n    } else if (cell && selectedChecker) {\r\n        const currentCell = selectedChecker.closest(\".Cell\");\r\n        const targetCell = cell;\r\n\r\n        console.log(\"currentCell:\", currentCell);\r\n        console.log(\"targetCell:\", targetCell);\r\n\r\n        if (!currentCell) {\r\n            console.error(\"currentCell is null\");\r\n            return;\r\n        }\r\n\r\n        // Проверяем, можно ли переместить шашку\r\n        if (isMoveValid(currentCell, targetCell, selectedChecker)) {\r\n            console.log(\"Move is valid\");\r\n\r\n            // Если прыжок через шашку — удаляем её\r\n            const jumpedCell = getJumpedCell(currentCell, targetCell);\r\n            if (jumpedCell) {\r\n                const jumpedChecker = jumpedCell.querySelector(\".checker\");\r\n                if (jumpedChecker) {\r\n                    console.log(\"Jumped Checker Removed\");\r\n                    jumpedChecker.remove();\r\n                }\r\n            }\r\n\r\n            // Перемещаем шашку\r\n            targetCell.appendChild(selectedChecker);\r\n            selectedChecker.classList.remove(\"selected\");\r\n            selectedChecker = null;\r\n\r\n            console.log(\"Checker moved\");\r\n        } else {\r\n            console.log(\"Move is invalid\");\r\n        }\r\n    }\r\n});\r\n\r\nfunction isMoveValid(currentCell, targetCell, checker) {\r\n    console.log(\"Validating move...\");\r\n\r\n    // Проверяем, что currentCell и targetCell существуют\r\n    if (!currentCell || !targetCell) {\r\n        console.log(\"currentCell or targetCell is null\");\r\n        return false;\r\n    }\r\n\r\n    const currentGridArea = window.getComputedStyle(currentCell).gridArea;\r\n    const targetGridArea = window.getComputedStyle(targetCell).gridArea;\r\n\r\n    const [currentRow, currentCol] = parseGridArea(currentGridArea);\r\n    const [targetRow, targetCol] = parseGridArea(targetGridArea);\r\n\r\n    const rowDiff = Math.abs(targetRow - currentRow);\r\n    const colDiff = Math.abs(targetCol - currentCol);\r\n\r\n    // Проверяем, что целевая клетка пуста\r\n    if (!targetCell.querySelector(\".checker\")) {\r\n        // Проверяем обычный ход\r\n        if (rowDiff === 1 && colDiff === 1) {\r\n            const jumpedCell = getJumpedCell(currentCell, targetCell);\r\n            if (jumpedCell) {\r\n                console.log(\"Jumped Cell Found:\", jumpedCell);\r\n                const jumpedChecker = jumpedCell.querySelector(\".checker\");\r\n                if (jumpedChecker) {\r\n                    console.log(\"Jumped Checker Removed\");\r\n                    jumpedChecker.remove();\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        // Проверяем прыжок через шашку\r\n        if (rowDiff === 2 && colDiff === 2) {\r\n            console.log(\"Checking for jump...\");\r\n            const jumpedCell = getJumpedCell(currentCell, targetCell);\r\n            if (jumpedCell) {\r\n                console.log(\"Jumped Cell Found:\", jumpedCell);\r\n                const jumpedChecker = jumpedCell.querySelector(\".checker\");\r\n                if (jumpedChecker) {\r\n                    console.log(\"Jumped Checker Removed\");\r\n                    jumpedChecker.remove();\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction getJumpedCell(currentCell, targetCell) {\r\n    console.log(\"getJumpedCell called\");\r\n\r\n    // Проверяем, что currentCell и targetCell существуют\r\n    if (!currentCell || !targetCell) {\r\n        console.log(\"currentCell or targetCell is null in getJumpedCell\");\r\n        return null;\r\n    }\r\n\r\n    const currentGridArea = window.getComputedStyle(currentCell).gridArea;\r\n    const targetGridArea = window.getComputedStyle(targetCell).gridArea;\r\n\r\n    const [currentRow, currentCol] = parseGridArea(currentGridArea);\r\n    const [targetRow, targetCol] = parseGridArea(targetGridArea);\r\n\r\n    console.log(`currentRow: ${currentRow}, currentCol: ${currentCol}`);\r\n    console.log(`targetRow: ${targetRow}, targetCol: ${targetCol}`);\r\n\r\n    // Вычисляем промежуточные координаты\r\n    const jumpedRow = Math.round((currentRow + targetRow) / 2);\r\n    const jumpedCol = Math.round((currentCol + targetCol) / 2);\r\n\r\n    console.log(`jumpedRow: ${jumpedRow}, jumpedCol: ${jumpedCol}`);\r\n\r\n    // Находим промежуточную ячейку с помощью grid-area\r\n    return findCellByGridArea(jumpedRow, jumpedCol);\r\n}\r\n\r\nfunction parseGridArea(gridArea) {\r\n    const parts = gridArea.split(\" / \").map(part => parseInt(part.trim(), 10));\r\n    return [parts[0], parts[1]]; // row-start и col-start\r\n}\r\n\r\nfunction findCellByGridArea(row, col) {\r\n    console.log(`Searching for cell at row=${row}, col=${col}`);\r\n    return Array.from(document.querySelectorAll(\".Cell\")).find(cell => {\r\n        const gridArea = window.getComputedStyle(cell).gridArea;\r\n        const [cellRow, cellCol] = parseGridArea(gridArea);\r\n        console.log(`Checking cell with gridArea: row=${cellRow}, col=${cellCol}`);\r\n        return cellRow === row && cellCol === col;\r\n    });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}